#summary How to use the bayesian network training tool

= Bayesian Network training tool: =

== 1. Objectives ==
The aim of this tool is to generate a BN from cases stored in an xml file, using the Smile library. An initial BN (in .xdsl or .net format) is needed to get the nodes and possible states. The tool follows the next use case diagram.


FALTA COMPLETAR CON EL DIBUJO

== 2. Installation ==
This tool uses the jsmile library (http://genie.sis.pitt.edu/download/software.html). In order to work, put this library on your Java Library Path. It also uses the jdom library to read xml files (http://www.jdom.org).



== 3. Usage ==
=== _3.1 Program usage_ ===
Firstly, put the xml file and the Bayesian network (.xdsl) file in the same folder. Then call the processTraining method in BNTrainingTool.java with the files path string as an argument. This will create a .data file with all the cases from the training file. Then, this file is passed to the smile library that generates the Bayesian network, which is stored in a subfolder called newBN in the path given with “NEW_” as a prefix. Also, a confidence.txt file is created. The confidence value is estimated by counting the lines in the .data file and adding the initial confidence from the training file. You can also check the log file saved in the same path.

=== _3.2 XML File_ ===
The format of the xml has to be similar as shown in the example. As many cases as desired can be written in this file:
{{{ 
<cases confidence="50">
    <case weight = "5">
        <nodes>
            <node id = "A" type=”TRAINING_LIST” value="1::2::3::4"/>
            <node id = "B" type=”TRAINING_NOT” value="2::3"/>
            <node id = "C" value=" "/>
        </nodes>
    </case>
    <case>
        <nodes>
            <node id = "A" value="2"/>
            <node id = "B" value=" "/>
            <node id = "C" value=" 3"/>
        </nodes>
    </case>
</cases>
}}}

-*Confidence*: This value sets the confidence of the initial BN. Set to 0 to use only the cases written in this file.

-*Weight*: Sets the weight of the case. Higher weight means higher probability of that case.

-*Nodes ID*: The id of the node, the same as the BN.

-*Nodes Type*: The type of the value. 

-*TRAINING_LIST*: If there are multiple values for this node.

-*TRAINING_NOT*: Generates one case for each value of the node from the BN except the ones specified in the value attribute. Supports multiple values.

-*Nodes Value*: The values for the specific case. Separate multiple values with a double colon “::” .

=== 3.3 _Bayesian Network_ ===
The Bayesian network has to be saved in .xdsl or .net format.

== 4. Test ==
In order to test the tool, we have used the grass wet example (can be found in http://en.wikipedia.org/wiki/Bayesian_network). Follows the next diagram:

=== _TEST.01_ ===
|| *Description* ||Test functionality of training file.||
|| *Objectives* ||The aim of this test is to check that the system works.||
|| *Pre-conditions* ||Generate the training xml file with cases using weight, training_list and training_not.||
|| *Expected results and evaluation criteria* ||The number of lines in the .data file generated should correspond to the .xml training file.||

 
=== _TEST.02_ ===
|| *Description* ||First test of the example.||
|| *Objectives* ||The aim of this test is to compare the results of the tool with the original Bayesian network||
|| *Pre-conditions* ||Generate the training xml file with 5 cases:||

||        || Rain  || Sprinkler || Grasswet ||
|| Case 1 || False ||  True     ||    *     ||
|| Case 2 || True  ||	*	||   True   ||
|| Case 3 ||  *	   ||  True	||   True   ||
|| Case 4 || False ||  False	||   False  ||
|| Case 5 || True  ||  False    ||     *    ||

|| *Expected results and evaluation criteria* ||The relations between nodes have to work similar but since we are using just 5 cases the probabilities may differ.||

 
=== _TEST.03_ ===

TERMINAR DE AÑADIR LAS TABLAS





== 5. Results ==

COMPLETAR CON LA TABLAS