package es.upm.dit.gsi.ontology;


import es.upm.dit.gsi.ontology.impl.*;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.*;
import edu.stanford.smi.protegex.owl.model.impl.OWLUtil;
import edu.stanford.smi.protegex.owl.javacode.ProtegeJavaMapping;

import java.util.*;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 *
 * @version generated on Fri Apr 01 15:09:42 CEST 2011
 */
public class MyFactory {

    private OWLModel owlModel;

    static {
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Diagnosis", Diagnosis.class, DefaultDiagnosis.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Device", Device.class, DefaultDevice.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#System", System.class, DefaultSystem.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Subsystem", Subsystem.class, DefaultSubsystem.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#HardwareSystem", HardwareSystem.class, DefaultHardwareSystem.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#SoftwareSystem", SoftwareSystem.class, DefaultSoftwareSystem.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Failure", Failure.class, DefaultFailure.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#UnsatisfiedCondition", UnsatisfiedCondition.class, DefaultUnsatisfiedCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#SatisfiedCondition", SatisfiedCondition.class, DefaultSatisfiedCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Condition", Condition.class, DefaultCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Human", Human.class, DefaultHuman.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Actor", Actor.class, DefaultActor.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Agent", Agent.class, DefaultAgent.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#UnsuccessfulyPerformedAction", UnsuccessfulyPerformedAction.class, DefaultUnsuccessfulyPerformedAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#SuccessfulyPerformedAction", SuccessfulyPerformedAction.class, DefaultSuccessfulyPerformedAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#PerformedAction", PerformedAction.class, DefaultPerformedAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Network", Network.class, DefaultNetwork.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Symptom", Symptom.class, DefaultSymptom.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#HealingAction", HealingAction.class, DefaultHealingAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#TestAction", TestAction.class, DefaultTestAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#EnvironmentAction", EnvironmentAction.class, DefaultEnvironmentAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Action", Action.class, DefaultAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#RequiredActorCondition", RequiredActorCondition.class, DefaultRequiredActorCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Connection", Connection.class, DefaultConnection.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#AvailableAction", AvailableAction.class, DefaultAvailableAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#UnavailableAction", UnavailableAction.class, DefaultUnavailableAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Hypothesis", Hypothesis.class, DefaultHypothesis.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Variable", Variable.class, DefaultVariable.class);
        ProtegeJavaMapping.add("http://swrl.stanford.edu/ontologies/3.3/swrla.owl#Entity", Entity.class, DefaultEntity.class);
        ProtegeJavaMapping.add("http://swrl.stanford.edu/ontologies/3.3/swrla.owl#RuleGroup", RuleGroup.class, DefaultRuleGroup.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#ArgRelationship", ArgRelationship.class, DefaultArgRelationship.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Entity", Entity.class, DefaultEntity.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#OVariable", OVariable.class, DefaultOVariable.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Node", Node.class, DefaultNode.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Exemplar", Exemplar.class, DefaultExemplar.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#BooleanRVStates", BooleanRVStates.class, DefaultBooleanRVStates.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#BuiltInRV", BuiltInRV.class, DefaultBuiltInRV.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#CategoricalRVStates", CategoricalRVStates.class, DefaultCategoricalRVStates.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#CondRelationship", CondRelationship.class, DefaultCondRelationship.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Context", Context.class, DefaultContext.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#DeclarativeDist", DeclarativeDist.class, DefaultDeclarativeDist.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#ProbDist", ProbDist.class, DefaultProbDist.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Domain_MFrag", Domain_MFrag.class, DefaultDomain_MFrag.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#MFrag", MFrag.class, DefaultMFrag.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Domain_Res", Domain_Res.class, DefaultDomain_Res.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Resident", Resident.class, DefaultResident.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Finding_MFrag", Finding_MFrag.class, DefaultFinding_MFrag.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Finding_input", Finding_input.class, DefaultFinding_input.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Input", Input.class, DefaultInput.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Finding_res", Finding_res.class, DefaultFinding_res.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Generative_input", Generative_input.class, DefaultGenerative_input.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#MTheory", MTheory.class, DefaultMTheory.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#MetaEntity", MetaEntity.class, DefaultMetaEntity.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#ObjectEntity", ObjectEntity.class, DefaultObjectEntity.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#PR-OWLTable", PR_OWLTable.class, DefaultPR_OWLTable.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#ProbAssign", ProbAssign.class, DefaultProbAssign.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#SimpleArgRelationship", SimpleArgRelationship.class, DefaultSimpleArgRelationship.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/BayesianDiagnosis.owl#HypothesisNode", HypothesisNode.class, DefaultHypothesisNode.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/BayesianDiagnosis.owl#ObservationNode", ObservationNode.class, DefaultObservationNode.class);
    }

    public MyFactory(OWLModel owlModel) {
        this.owlModel = owlModel;
    }

    public <X> X create(Class<? extends X> javaInterface, String name) {
        return ProtegeJavaMapping.create(owlModel, javaInterface, name);
    }


    public RDFSNamedClass getDiagnosisClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Diagnosis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Diagnosis createDiagnosis(String name) {
        final RDFSNamedClass cls = getDiagnosisClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultDiagnosis(owlModel, cls.createInstance(name).getFrameID());
    }

    public Diagnosis getDiagnosis(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Diagnosis) {
            return (Diagnosis) res;
        } else if (res.hasProtegeType(getDiagnosisClass())) {
            return new DefaultDiagnosis(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Diagnosis> getAllDiagnosisInstances() {
        return getAllDiagnosisInstances(false);
    }

    public Set<Diagnosis> getAllDiagnosisInstances(boolean transitive) {
        Set<Diagnosis> result = new HashSet<Diagnosis>();
        final RDFSNamedClass cls = getDiagnosisClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDiagnosis(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getDeviceClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Device";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Device createDevice(String name) {
        final RDFSNamedClass cls = getDeviceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultDevice(owlModel, cls.createInstance(name).getFrameID());
    }

    public Device getDevice(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Device) {
            return (Device) res;
        } else if (res.hasProtegeType(getDeviceClass())) {
            return new DefaultDevice(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Device> getAllDeviceInstances() {
        return getAllDeviceInstances(false);
    }

    public Set<Device> getAllDeviceInstances(boolean transitive) {
        Set<Device> result = new HashSet<Device>();
        final RDFSNamedClass cls = getDeviceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDevice(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSystemClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#System";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public System createSystem(String name) {
        final RDFSNamedClass cls = getSystemClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSystem(owlModel, cls.createInstance(name).getFrameID());
    }

    public System getSystem(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof System) {
            return (System) res;
        } else if (res.hasProtegeType(getSystemClass())) {
            return new DefaultSystem(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<System> getAllSystemInstances() {
        return getAllSystemInstances(false);
    }

    public Set<System> getAllSystemInstances(boolean transitive) {
        Set<System> result = new HashSet<System>();
        final RDFSNamedClass cls = getSystemClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSystem(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSubsystemClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Subsystem";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Subsystem createSubsystem(String name) {
        final RDFSNamedClass cls = getSubsystemClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSubsystem(owlModel, cls.createInstance(name).getFrameID());
    }

    public Subsystem getSubsystem(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Subsystem) {
            return (Subsystem) res;
        } else if (res.hasProtegeType(getSubsystemClass())) {
            return new DefaultSubsystem(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Subsystem> getAllSubsystemInstances() {
        return getAllSubsystemInstances(false);
    }

    public Set<Subsystem> getAllSubsystemInstances(boolean transitive) {
        Set<Subsystem> result = new HashSet<Subsystem>();
        final RDFSNamedClass cls = getSubsystemClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSubsystem(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHardwareSystemClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#HardwareSystem";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public HardwareSystem createHardwareSystem(String name) {
        final RDFSNamedClass cls = getHardwareSystemClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHardwareSystem(owlModel, cls.createInstance(name).getFrameID());
    }

    public HardwareSystem getHardwareSystem(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof HardwareSystem) {
            return (HardwareSystem) res;
        } else if (res.hasProtegeType(getHardwareSystemClass())) {
            return new DefaultHardwareSystem(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<HardwareSystem> getAllHardwareSystemInstances() {
        return getAllHardwareSystemInstances(false);
    }

    public Set<HardwareSystem> getAllHardwareSystemInstances(boolean transitive) {
        Set<HardwareSystem> result = new HashSet<HardwareSystem>();
        final RDFSNamedClass cls = getHardwareSystemClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHardwareSystem(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSoftwareSystemClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#SoftwareSystem";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SoftwareSystem createSoftwareSystem(String name) {
        final RDFSNamedClass cls = getSoftwareSystemClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSoftwareSystem(owlModel, cls.createInstance(name).getFrameID());
    }

    public SoftwareSystem getSoftwareSystem(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof SoftwareSystem) {
            return (SoftwareSystem) res;
        } else if (res.hasProtegeType(getSoftwareSystemClass())) {
            return new DefaultSoftwareSystem(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<SoftwareSystem> getAllSoftwareSystemInstances() {
        return getAllSoftwareSystemInstances(false);
    }

    public Set<SoftwareSystem> getAllSoftwareSystemInstances(boolean transitive) {
        Set<SoftwareSystem> result = new HashSet<SoftwareSystem>();
        final RDFSNamedClass cls = getSoftwareSystemClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSoftwareSystem(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getFailureClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Failure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Failure createFailure(String name) {
        final RDFSNamedClass cls = getFailureClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultFailure(owlModel, cls.createInstance(name).getFrameID());
    }

    public Failure getFailure(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Failure) {
            return (Failure) res;
        } else if (res.hasProtegeType(getFailureClass())) {
            return new DefaultFailure(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Failure> getAllFailureInstances() {
        return getAllFailureInstances(false);
    }

    public Set<Failure> getAllFailureInstances(boolean transitive) {
        Set<Failure> result = new HashSet<Failure>();
        final RDFSNamedClass cls = getFailureClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultFailure(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getUnsatisfiedConditionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#UnsatisfiedCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UnsatisfiedCondition createUnsatisfiedCondition(String name) {
        final RDFSNamedClass cls = getUnsatisfiedConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultUnsatisfiedCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public UnsatisfiedCondition getUnsatisfiedCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof UnsatisfiedCondition) {
            return (UnsatisfiedCondition) res;
        } else if (res.hasProtegeType(getUnsatisfiedConditionClass())) {
            return new DefaultUnsatisfiedCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<UnsatisfiedCondition> getAllUnsatisfiedConditionInstances() {
        return getAllUnsatisfiedConditionInstances(false);
    }

    public Set<UnsatisfiedCondition> getAllUnsatisfiedConditionInstances(boolean transitive) {
        Set<UnsatisfiedCondition> result = new HashSet<UnsatisfiedCondition>();
        final RDFSNamedClass cls = getUnsatisfiedConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultUnsatisfiedCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSatisfiedConditionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#SatisfiedCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SatisfiedCondition createSatisfiedCondition(String name) {
        final RDFSNamedClass cls = getSatisfiedConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSatisfiedCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public SatisfiedCondition getSatisfiedCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof SatisfiedCondition) {
            return (SatisfiedCondition) res;
        } else if (res.hasProtegeType(getSatisfiedConditionClass())) {
            return new DefaultSatisfiedCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<SatisfiedCondition> getAllSatisfiedConditionInstances() {
        return getAllSatisfiedConditionInstances(false);
    }

    public Set<SatisfiedCondition> getAllSatisfiedConditionInstances(boolean transitive) {
        Set<SatisfiedCondition> result = new HashSet<SatisfiedCondition>();
        final RDFSNamedClass cls = getSatisfiedConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSatisfiedCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getConditionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Condition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Condition createCondition(String name) {
        final RDFSNamedClass cls = getConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public Condition getCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Condition) {
            return (Condition) res;
        } else if (res.hasProtegeType(getConditionClass())) {
            return new DefaultCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Condition> getAllConditionInstances() {
        return getAllConditionInstances(false);
    }

    public Set<Condition> getAllConditionInstances(boolean transitive) {
        Set<Condition> result = new HashSet<Condition>();
        final RDFSNamedClass cls = getConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHumanClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Human";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Human createHuman(String name) {
        final RDFSNamedClass cls = getHumanClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHuman(owlModel, cls.createInstance(name).getFrameID());
    }

    public Human getHuman(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Human) {
            return (Human) res;
        } else if (res.hasProtegeType(getHumanClass())) {
            return new DefaultHuman(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Human> getAllHumanInstances() {
        return getAllHumanInstances(false);
    }

    public Set<Human> getAllHumanInstances(boolean transitive) {
        Set<Human> result = new HashSet<Human>();
        final RDFSNamedClass cls = getHumanClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHuman(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getActorClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Actor";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Actor createActor(String name) {
        final RDFSNamedClass cls = getActorClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultActor(owlModel, cls.createInstance(name).getFrameID());
    }

    public Actor getActor(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Actor) {
            return (Actor) res;
        } else if (res.hasProtegeType(getActorClass())) {
            return new DefaultActor(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Actor> getAllActorInstances() {
        return getAllActorInstances(false);
    }

    public Set<Actor> getAllActorInstances(boolean transitive) {
        Set<Actor> result = new HashSet<Actor>();
        final RDFSNamedClass cls = getActorClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultActor(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getAgentClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Agent";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Agent createAgent(String name) {
        final RDFSNamedClass cls = getAgentClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultAgent(owlModel, cls.createInstance(name).getFrameID());
    }

    public Agent getAgent(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Agent) {
            return (Agent) res;
        } else if (res.hasProtegeType(getAgentClass())) {
            return new DefaultAgent(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Agent> getAllAgentInstances() {
        return getAllAgentInstances(false);
    }

    public Set<Agent> getAllAgentInstances(boolean transitive) {
        Set<Agent> result = new HashSet<Agent>();
        final RDFSNamedClass cls = getAgentClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultAgent(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getUnsuccessfulyPerformedActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#UnsuccessfulyPerformedAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UnsuccessfulyPerformedAction createUnsuccessfulyPerformedAction(String name) {
        final RDFSNamedClass cls = getUnsuccessfulyPerformedActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultUnsuccessfulyPerformedAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public UnsuccessfulyPerformedAction getUnsuccessfulyPerformedAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof UnsuccessfulyPerformedAction) {
            return (UnsuccessfulyPerformedAction) res;
        } else if (res.hasProtegeType(getUnsuccessfulyPerformedActionClass())) {
            return new DefaultUnsuccessfulyPerformedAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<UnsuccessfulyPerformedAction> getAllUnsuccessfulyPerformedActionInstances() {
        return getAllUnsuccessfulyPerformedActionInstances(false);
    }

    public Set<UnsuccessfulyPerformedAction> getAllUnsuccessfulyPerformedActionInstances(boolean transitive) {
        Set<UnsuccessfulyPerformedAction> result = new HashSet<UnsuccessfulyPerformedAction>();
        final RDFSNamedClass cls = getUnsuccessfulyPerformedActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultUnsuccessfulyPerformedAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSuccessfulyPerformedActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#SuccessfulyPerformedAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SuccessfulyPerformedAction createSuccessfulyPerformedAction(String name) {
        final RDFSNamedClass cls = getSuccessfulyPerformedActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSuccessfulyPerformedAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public SuccessfulyPerformedAction getSuccessfulyPerformedAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof SuccessfulyPerformedAction) {
            return (SuccessfulyPerformedAction) res;
        } else if (res.hasProtegeType(getSuccessfulyPerformedActionClass())) {
            return new DefaultSuccessfulyPerformedAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<SuccessfulyPerformedAction> getAllSuccessfulyPerformedActionInstances() {
        return getAllSuccessfulyPerformedActionInstances(false);
    }

    public Set<SuccessfulyPerformedAction> getAllSuccessfulyPerformedActionInstances(boolean transitive) {
        Set<SuccessfulyPerformedAction> result = new HashSet<SuccessfulyPerformedAction>();
        final RDFSNamedClass cls = getSuccessfulyPerformedActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSuccessfulyPerformedAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getPerformedActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#PerformedAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PerformedAction createPerformedAction(String name) {
        final RDFSNamedClass cls = getPerformedActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultPerformedAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public PerformedAction getPerformedAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof PerformedAction) {
            return (PerformedAction) res;
        } else if (res.hasProtegeType(getPerformedActionClass())) {
            return new DefaultPerformedAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<PerformedAction> getAllPerformedActionInstances() {
        return getAllPerformedActionInstances(false);
    }

    public Set<PerformedAction> getAllPerformedActionInstances(boolean transitive) {
        Set<PerformedAction> result = new HashSet<PerformedAction>();
        final RDFSNamedClass cls = getPerformedActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultPerformedAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getNetworkClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Network";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Network createNetwork(String name) {
        final RDFSNamedClass cls = getNetworkClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultNetwork(owlModel, cls.createInstance(name).getFrameID());
    }

    public Network getNetwork(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Network) {
            return (Network) res;
        } else if (res.hasProtegeType(getNetworkClass())) {
            return new DefaultNetwork(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Network> getAllNetworkInstances() {
        return getAllNetworkInstances(false);
    }

    public Set<Network> getAllNetworkInstances(boolean transitive) {
        Set<Network> result = new HashSet<Network>();
        final RDFSNamedClass cls = getNetworkClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultNetwork(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSymptomClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Symptom";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Symptom createSymptom(String name) {
        final RDFSNamedClass cls = getSymptomClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSymptom(owlModel, cls.createInstance(name).getFrameID());
    }

    public Symptom getSymptom(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Symptom) {
            return (Symptom) res;
        } else if (res.hasProtegeType(getSymptomClass())) {
            return new DefaultSymptom(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Symptom> getAllSymptomInstances() {
        return getAllSymptomInstances(false);
    }

    public Set<Symptom> getAllSymptomInstances(boolean transitive) {
        Set<Symptom> result = new HashSet<Symptom>();
        final RDFSNamedClass cls = getSymptomClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSymptom(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHealingActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#HealingAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public HealingAction createHealingAction(String name) {
        final RDFSNamedClass cls = getHealingActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHealingAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public HealingAction getHealingAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof HealingAction) {
            return (HealingAction) res;
        } else if (res.hasProtegeType(getHealingActionClass())) {
            return new DefaultHealingAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<HealingAction> getAllHealingActionInstances() {
        return getAllHealingActionInstances(false);
    }

    public Set<HealingAction> getAllHealingActionInstances(boolean transitive) {
        Set<HealingAction> result = new HashSet<HealingAction>();
        final RDFSNamedClass cls = getHealingActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHealingAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getTestActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#TestAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public TestAction createTestAction(String name) {
        final RDFSNamedClass cls = getTestActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultTestAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public TestAction getTestAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof TestAction) {
            return (TestAction) res;
        } else if (res.hasProtegeType(getTestActionClass())) {
            return new DefaultTestAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<TestAction> getAllTestActionInstances() {
        return getAllTestActionInstances(false);
    }

    public Set<TestAction> getAllTestActionInstances(boolean transitive) {
        Set<TestAction> result = new HashSet<TestAction>();
        final RDFSNamedClass cls = getTestActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultTestAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getEnvironmentActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#EnvironmentAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public EnvironmentAction createEnvironmentAction(String name) {
        final RDFSNamedClass cls = getEnvironmentActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultEnvironmentAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public EnvironmentAction getEnvironmentAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof EnvironmentAction) {
            return (EnvironmentAction) res;
        } else if (res.hasProtegeType(getEnvironmentActionClass())) {
            return new DefaultEnvironmentAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<EnvironmentAction> getAllEnvironmentActionInstances() {
        return getAllEnvironmentActionInstances(false);
    }

    public Set<EnvironmentAction> getAllEnvironmentActionInstances(boolean transitive) {
        Set<EnvironmentAction> result = new HashSet<EnvironmentAction>();
        final RDFSNamedClass cls = getEnvironmentActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultEnvironmentAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Action";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Action createAction(String name) {
        final RDFSNamedClass cls = getActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public Action getAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Action) {
            return (Action) res;
        } else if (res.hasProtegeType(getActionClass())) {
            return new DefaultAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Action> getAllActionInstances() {
        return getAllActionInstances(false);
    }

    public Set<Action> getAllActionInstances(boolean transitive) {
        Set<Action> result = new HashSet<Action>();
        final RDFSNamedClass cls = getActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRequiredActorConditionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#RequiredActorCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RequiredActorCondition createRequiredActorCondition(String name) {
        final RDFSNamedClass cls = getRequiredActorConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRequiredActorCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public RequiredActorCondition getRequiredActorCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RequiredActorCondition) {
            return (RequiredActorCondition) res;
        } else if (res.hasProtegeType(getRequiredActorConditionClass())) {
            return new DefaultRequiredActorCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<RequiredActorCondition> getAllRequiredActorConditionInstances() {
        return getAllRequiredActorConditionInstances(false);
    }

    public Set<RequiredActorCondition> getAllRequiredActorConditionInstances(boolean transitive) {
        Set<RequiredActorCondition> result = new HashSet<RequiredActorCondition>();
        final RDFSNamedClass cls = getRequiredActorConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRequiredActorCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getConnectionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Connection";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Connection createConnection(String name) {
        final RDFSNamedClass cls = getConnectionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultConnection(owlModel, cls.createInstance(name).getFrameID());
    }

    public Connection getConnection(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Connection) {
            return (Connection) res;
        } else if (res.hasProtegeType(getConnectionClass())) {
            return new DefaultConnection(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Connection> getAllConnectionInstances() {
        return getAllConnectionInstances(false);
    }

    public Set<Connection> getAllConnectionInstances(boolean transitive) {
        Set<Connection> result = new HashSet<Connection>();
        final RDFSNamedClass cls = getConnectionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultConnection(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getAvailableActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#AvailableAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public AvailableAction createAvailableAction(String name) {
        final RDFSNamedClass cls = getAvailableActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultAvailableAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public AvailableAction getAvailableAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof AvailableAction) {
            return (AvailableAction) res;
        } else if (res.hasProtegeType(getAvailableActionClass())) {
            return new DefaultAvailableAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<AvailableAction> getAllAvailableActionInstances() {
        return getAllAvailableActionInstances(false);
    }

    public Set<AvailableAction> getAllAvailableActionInstances(boolean transitive) {
        Set<AvailableAction> result = new HashSet<AvailableAction>();
        final RDFSNamedClass cls = getAvailableActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultAvailableAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getUnavailableActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#UnavailableAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UnavailableAction createUnavailableAction(String name) {
        final RDFSNamedClass cls = getUnavailableActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultUnavailableAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public UnavailableAction getUnavailableAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof UnavailableAction) {
            return (UnavailableAction) res;
        } else if (res.hasProtegeType(getUnavailableActionClass())) {
            return new DefaultUnavailableAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<UnavailableAction> getAllUnavailableActionInstances() {
        return getAllUnavailableActionInstances(false);
    }

    public Set<UnavailableAction> getAllUnavailableActionInstances(boolean transitive) {
        Set<UnavailableAction> result = new HashSet<UnavailableAction>();
        final RDFSNamedClass cls = getUnavailableActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultUnavailableAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHypothesisClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Hypothesis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Hypothesis createHypothesis(String name) {
        final RDFSNamedClass cls = getHypothesisClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHypothesis(owlModel, cls.createInstance(name).getFrameID());
    }

    public Hypothesis getHypothesis(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Hypothesis) {
            return (Hypothesis) res;
        } else if (res.hasProtegeType(getHypothesisClass())) {
            return new DefaultHypothesis(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Hypothesis> getAllHypothesisInstances() {
        return getAllHypothesisInstances(false);
    }

    public Set<Hypothesis> getAllHypothesisInstances(boolean transitive) {
        Set<Hypothesis> result = new HashSet<Hypothesis>();
        final RDFSNamedClass cls = getHypothesisClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHypothesis(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getVariableClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Variable";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Variable createVariable(String name) {
        final RDFSNamedClass cls = getVariableClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultVariable(owlModel, cls.createInstance(name).getFrameID());
    }

    public Variable getVariable(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Variable) {
            return (Variable) res;
        } else if (res.hasProtegeType(getVariableClass())) {
            return new DefaultVariable(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Variable> getAllVariableInstances() {
        return getAllVariableInstances(false);
    }

    public Set<Variable> getAllVariableInstances(boolean transitive) {
        Set<Variable> result = new HashSet<Variable>();
        final RDFSNamedClass cls = getVariableClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultVariable(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


//    public RDFSNamedClass getEntityClass() {
//        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#Entity";
//        final String name = OWL_MODEL.getResourceNameForURI(uri);
//        return OWL_MODEL.getRDFSNamedClass(name);
//    }
//
//    public Entity createEntity(String name) {
//        final RDFSNamedClass cls = getEntityClass();
//        if (name == null) {
//            name = OWL_MODEL.getNextAnonymousResourceName();
//        }
//        return  new DefaultEntity(OWL_MODEL, cls.createInstance(name).getFrameID());
//    }
//
//    public Entity getEntity(String name) {
//        RDFResource res = OWL_MODEL.getRDFResource(OWLUtil.getInternalFullName(OWL_MODEL, name));
//        if (res == null) {return null;}
//        if (res instanceof Entity) {
//            return (Entity) res;
//        } else if (res.hasProtegeType(getEntityClass())) {
//            return new DefaultEntity(OWL_MODEL, res.getFrameID());
//        }
//        return null;
//    }
//
//    public Set<Entity> getAllEntityInstances() {
//        return getAllEntityInstances(false);
//    }

//    public Set<Entity> getAllEntityInstances(boolean transitive) {
//        Set<Entity> result = new HashSet<Entity>();
//        final RDFSNamedClass cls = getEntityClass();
//        RDFResource owlIndividual;
//        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
//            owlIndividual = (RDFResource) it.next();
//            result.add(new DefaultEntity(OWL_MODEL, owlIndividual.getFrameID()));
//        }
//        return result;
//    }


    public RDFSNamedClass getRuleGroupClass() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#RuleGroup";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RuleGroup createRuleGroup(String name) {
        final RDFSNamedClass cls = getRuleGroupClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRuleGroup(owlModel, cls.createInstance(name).getFrameID());
    }

    public RuleGroup getRuleGroup(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RuleGroup) {
            return (RuleGroup) res;
        } else if (res.hasProtegeType(getRuleGroupClass())) {
            return new DefaultRuleGroup(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<RuleGroup> getAllRuleGroupInstances() {
        return getAllRuleGroupInstances(false);
    }

    public Set<RuleGroup> getAllRuleGroupInstances(boolean transitive) {
        Set<RuleGroup> result = new HashSet<RuleGroup>();
        final RDFSNamedClass cls = getRuleGroupClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRuleGroup(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getArgRelationshipClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#ArgRelationship";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ArgRelationship createArgRelationship(String name) {
        final RDFSNamedClass cls = getArgRelationshipClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultArgRelationship(owlModel, cls.createInstance(name).getFrameID());
    }

    public ArgRelationship getArgRelationship(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ArgRelationship) {
            return (ArgRelationship) res;
        } else if (res.hasProtegeType(getArgRelationshipClass())) {
            return new DefaultArgRelationship(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<ArgRelationship> getAllArgRelationshipInstances() {
        return getAllArgRelationshipInstances(false);
    }

    public Set<ArgRelationship> getAllArgRelationshipInstances(boolean transitive) {
        Set<ArgRelationship> result = new HashSet<ArgRelationship>();
        final RDFSNamedClass cls = getArgRelationshipClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultArgRelationship(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getEntityClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Entity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Entity createEntity(String name) {
        final RDFSNamedClass cls = getEntityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultEntity(owlModel, cls.createInstance(name).getFrameID());
    }

    public Entity getEntity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Entity) {
            return (Entity) res;
        } else if (res.hasProtegeType(getEntityClass())) {
            return new DefaultEntity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Entity> getAllEntityInstances() {
        return getAllEntityInstances(false);
    }

    public Set<Entity> getAllEntityInstances(boolean transitive) {
        Set<Entity> result = new HashSet<Entity>();
        final RDFSNamedClass cls = getEntityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultEntity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getOVariableClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#OVariable";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public OVariable createOVariable(String name) {
        final RDFSNamedClass cls = getOVariableClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultOVariable(owlModel, cls.createInstance(name).getFrameID());
    }

    public OVariable getOVariable(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof OVariable) {
            return (OVariable) res;
        } else if (res.hasProtegeType(getOVariableClass())) {
            return new DefaultOVariable(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<OVariable> getAllOVariableInstances() {
        return getAllOVariableInstances(false);
    }

    public Set<OVariable> getAllOVariableInstances(boolean transitive) {
        Set<OVariable> result = new HashSet<OVariable>();
        final RDFSNamedClass cls = getOVariableClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultOVariable(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getNodeClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Node";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Node createNode(String name) {
        final RDFSNamedClass cls = getNodeClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultNode(owlModel, cls.createInstance(name).getFrameID());
    }

    public Node getNode(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Node) {
            return (Node) res;
        } else if (res.hasProtegeType(getNodeClass())) {
            return new DefaultNode(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Node> getAllNodeInstances() {
        return getAllNodeInstances(false);
    }

    public Set<Node> getAllNodeInstances(boolean transitive) {
        Set<Node> result = new HashSet<Node>();
        final RDFSNamedClass cls = getNodeClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultNode(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getExemplarClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Exemplar";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Exemplar createExemplar(String name) {
        final RDFSNamedClass cls = getExemplarClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultExemplar(owlModel, cls.createInstance(name).getFrameID());
    }

    public Exemplar getExemplar(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Exemplar) {
            return (Exemplar) res;
        } else if (res.hasProtegeType(getExemplarClass())) {
            return new DefaultExemplar(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Exemplar> getAllExemplarInstances() {
        return getAllExemplarInstances(false);
    }

    public Set<Exemplar> getAllExemplarInstances(boolean transitive) {
        Set<Exemplar> result = new HashSet<Exemplar>();
        final RDFSNamedClass cls = getExemplarClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultExemplar(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getBooleanRVStatesClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#BooleanRVStates";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public BooleanRVStates createBooleanRVStates(String name) {
        final RDFSNamedClass cls = getBooleanRVStatesClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultBooleanRVStates(owlModel, cls.createInstance(name).getFrameID());
    }

    public BooleanRVStates getBooleanRVStates(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof BooleanRVStates) {
            return (BooleanRVStates) res;
        } else if (res.hasProtegeType(getBooleanRVStatesClass())) {
            return new DefaultBooleanRVStates(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<BooleanRVStates> getAllBooleanRVStatesInstances() {
        return getAllBooleanRVStatesInstances(false);
    }

    public Set<BooleanRVStates> getAllBooleanRVStatesInstances(boolean transitive) {
        Set<BooleanRVStates> result = new HashSet<BooleanRVStates>();
        final RDFSNamedClass cls = getBooleanRVStatesClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultBooleanRVStates(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getBuiltInRVClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#BuiltInRV";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public BuiltInRV createBuiltInRV(String name) {
        final RDFSNamedClass cls = getBuiltInRVClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultBuiltInRV(owlModel, cls.createInstance(name).getFrameID());
    }

    public BuiltInRV getBuiltInRV(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof BuiltInRV) {
            return (BuiltInRV) res;
        } else if (res.hasProtegeType(getBuiltInRVClass())) {
            return new DefaultBuiltInRV(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<BuiltInRV> getAllBuiltInRVInstances() {
        return getAllBuiltInRVInstances(false);
    }

    public Set<BuiltInRV> getAllBuiltInRVInstances(boolean transitive) {
        Set<BuiltInRV> result = new HashSet<BuiltInRV>();
        final RDFSNamedClass cls = getBuiltInRVClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultBuiltInRV(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getCategoricalRVStatesClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#CategoricalRVStates";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public CategoricalRVStates createCategoricalRVStates(String name) {
        final RDFSNamedClass cls = getCategoricalRVStatesClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultCategoricalRVStates(owlModel, cls.createInstance(name).getFrameID());
    }

    public CategoricalRVStates getCategoricalRVStates(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof CategoricalRVStates) {
            return (CategoricalRVStates) res;
        } else if (res.hasProtegeType(getCategoricalRVStatesClass())) {
            return new DefaultCategoricalRVStates(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<CategoricalRVStates> getAllCategoricalRVStatesInstances() {
        return getAllCategoricalRVStatesInstances(false);
    }

    public Set<CategoricalRVStates> getAllCategoricalRVStatesInstances(boolean transitive) {
        Set<CategoricalRVStates> result = new HashSet<CategoricalRVStates>();
        final RDFSNamedClass cls = getCategoricalRVStatesClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultCategoricalRVStates(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getCondRelationshipClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#CondRelationship";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public CondRelationship createCondRelationship(String name) {
        final RDFSNamedClass cls = getCondRelationshipClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultCondRelationship(owlModel, cls.createInstance(name).getFrameID());
    }

    public CondRelationship getCondRelationship(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof CondRelationship) {
            return (CondRelationship) res;
        } else if (res.hasProtegeType(getCondRelationshipClass())) {
            return new DefaultCondRelationship(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<CondRelationship> getAllCondRelationshipInstances() {
        return getAllCondRelationshipInstances(false);
    }

    public Set<CondRelationship> getAllCondRelationshipInstances(boolean transitive) {
        Set<CondRelationship> result = new HashSet<CondRelationship>();
        final RDFSNamedClass cls = getCondRelationshipClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultCondRelationship(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getContextClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Context";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Context createContext(String name) {
        final RDFSNamedClass cls = getContextClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultContext(owlModel, cls.createInstance(name).getFrameID());
    }

    public Context getContext(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Context) {
            return (Context) res;
        } else if (res.hasProtegeType(getContextClass())) {
            return new DefaultContext(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Context> getAllContextInstances() {
        return getAllContextInstances(false);
    }

    public Set<Context> getAllContextInstances(boolean transitive) {
        Set<Context> result = new HashSet<Context>();
        final RDFSNamedClass cls = getContextClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultContext(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getDeclarativeDistClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#DeclarativeDist";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public DeclarativeDist createDeclarativeDist(String name) {
        final RDFSNamedClass cls = getDeclarativeDistClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultDeclarativeDist(owlModel, cls.createInstance(name).getFrameID());
    }

    public DeclarativeDist getDeclarativeDist(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof DeclarativeDist) {
            return (DeclarativeDist) res;
        } else if (res.hasProtegeType(getDeclarativeDistClass())) {
            return new DefaultDeclarativeDist(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<DeclarativeDist> getAllDeclarativeDistInstances() {
        return getAllDeclarativeDistInstances(false);
    }

    public Set<DeclarativeDist> getAllDeclarativeDistInstances(boolean transitive) {
        Set<DeclarativeDist> result = new HashSet<DeclarativeDist>();
        final RDFSNamedClass cls = getDeclarativeDistClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDeclarativeDist(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getProbDistClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#ProbDist";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ProbDist createProbDist(String name) {
        final RDFSNamedClass cls = getProbDistClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultProbDist(owlModel, cls.createInstance(name).getFrameID());
    }

    public ProbDist getProbDist(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ProbDist) {
            return (ProbDist) res;
        } else if (res.hasProtegeType(getProbDistClass())) {
            return new DefaultProbDist(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<ProbDist> getAllProbDistInstances() {
        return getAllProbDistInstances(false);
    }

    public Set<ProbDist> getAllProbDistInstances(boolean transitive) {
        Set<ProbDist> result = new HashSet<ProbDist>();
        final RDFSNamedClass cls = getProbDistClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultProbDist(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getDomain_MFragClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Domain_MFrag";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Domain_MFrag createDomain_MFrag(String name) {
        final RDFSNamedClass cls = getDomain_MFragClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultDomain_MFrag(owlModel, cls.createInstance(name).getFrameID());
    }

    public Domain_MFrag getDomain_MFrag(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Domain_MFrag) {
            return (Domain_MFrag) res;
        } else if (res.hasProtegeType(getDomain_MFragClass())) {
            return new DefaultDomain_MFrag(owlModel, res.getFrameID());
        }
        return null;
    }
    
    public Set<Domain_MFrag> getAllDomain_MFragInstances() {
        return getAllDomain_MFragInstances(false);
    }

    public Set<Domain_MFrag> getAllDomain_MFragInstances(boolean transitive) {
        Set<Domain_MFrag> result = new HashSet<Domain_MFrag>();
        final RDFSNamedClass cls = getDomain_MFragClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDomain_MFrag(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getMFragClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#MFrag";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public MFrag createMFrag(String name) {
        final RDFSNamedClass cls = getMFragClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultMFrag(owlModel, cls.createInstance(name).getFrameID());
    }

    public MFrag getMFrag(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof MFrag) {
            return (MFrag) res;
        } else if (res.hasProtegeType(getMFragClass())) {
            return new DefaultMFrag(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<MFrag> getAllMFragInstances() {
        return getAllMFragInstances(false);
    }

    public Set<MFrag> getAllMFragInstances(boolean transitive) {
        Set<MFrag> result = new HashSet<MFrag>();
        final RDFSNamedClass cls = getMFragClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultMFrag(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getDomain_ResClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Domain_Res";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Domain_Res createDomain_Res(String name) {
        final RDFSNamedClass cls = getDomain_ResClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultDomain_Res(owlModel, cls.createInstance(name).getFrameID());
    }

    public Domain_Res getDomain_Res(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Domain_Res) {
            return (Domain_Res) res;
        } else if (res.hasProtegeType(getDomain_ResClass())) {
            return new DefaultDomain_Res(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Domain_Res> getAllDomain_ResInstances() {
        return getAllDomain_ResInstances(false);
    }

    public Set<Domain_Res> getAllDomain_ResInstances(boolean transitive) {
        Set<Domain_Res> result = new HashSet<Domain_Res>();
        final RDFSNamedClass cls = getDomain_ResClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDomain_Res(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getResidentClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Resident";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Resident createResident(String name) {
        final RDFSNamedClass cls = getResidentClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultResident(owlModel, cls.createInstance(name).getFrameID());
    }

    public Resident getResident(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Resident) {
            return (Resident) res;
        } else if (res.hasProtegeType(getResidentClass())) {
            return new DefaultResident(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Resident> getAllResidentInstances() {
        return getAllResidentInstances(false);
    }

    public Set<Resident> getAllResidentInstances(boolean transitive) {
        Set<Resident> result = new HashSet<Resident>();
        final RDFSNamedClass cls = getResidentClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultResident(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getFinding_MFragClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Finding_MFrag";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Finding_MFrag createFinding_MFrag(String name) {
        final RDFSNamedClass cls = getFinding_MFragClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultFinding_MFrag(owlModel, cls.createInstance(name).getFrameID());
    }

    public Finding_MFrag getFinding_MFrag(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Finding_MFrag) {
            return (Finding_MFrag) res;
        } else if (res.hasProtegeType(getFinding_MFragClass())) {
            return new DefaultFinding_MFrag(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Finding_MFrag> getAllFinding_MFragInstances() {
        return getAllFinding_MFragInstances(false);
    }

    public Set<Finding_MFrag> getAllFinding_MFragInstances(boolean transitive) {
        Set<Finding_MFrag> result = new HashSet<Finding_MFrag>();
        final RDFSNamedClass cls = getFinding_MFragClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultFinding_MFrag(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getFinding_inputClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Finding_input";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Finding_input createFinding_input(String name) {
        final RDFSNamedClass cls = getFinding_inputClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultFinding_input(owlModel, cls.createInstance(name).getFrameID());
    }

    public Finding_input getFinding_input(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Finding_input) {
            return (Finding_input) res;
        } else if (res.hasProtegeType(getFinding_inputClass())) {
            return new DefaultFinding_input(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Finding_input> getAllFinding_inputInstances() {
        return getAllFinding_inputInstances(false);
    }

    public Set<Finding_input> getAllFinding_inputInstances(boolean transitive) {
        Set<Finding_input> result = new HashSet<Finding_input>();
        final RDFSNamedClass cls = getFinding_inputClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultFinding_input(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getInputClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Input";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Input createInput(String name) {
        final RDFSNamedClass cls = getInputClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultInput(owlModel, cls.createInstance(name).getFrameID());
    }

    public Input getInput(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Input) {
            return (Input) res;
        } else if (res.hasProtegeType(getInputClass())) {
            return new DefaultInput(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Input> getAllInputInstances() {
        return getAllInputInstances(false);
    }

    public Set<Input> getAllInputInstances(boolean transitive) {
        Set<Input> result = new HashSet<Input>();
        final RDFSNamedClass cls = getInputClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultInput(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getFinding_resClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Finding_res";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Finding_res createFinding_res(String name) {
        final RDFSNamedClass cls = getFinding_resClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultFinding_res(owlModel, cls.createInstance(name).getFrameID());
    }

    public Finding_res getFinding_res(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Finding_res) {
            return (Finding_res) res;
        } else if (res.hasProtegeType(getFinding_resClass())) {
            return new DefaultFinding_res(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Finding_res> getAllFinding_resInstances() {
        return getAllFinding_resInstances(false);
    }

    public Set<Finding_res> getAllFinding_resInstances(boolean transitive) {
        Set<Finding_res> result = new HashSet<Finding_res>();
        final RDFSNamedClass cls = getFinding_resClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultFinding_res(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getGenerative_inputClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Generative_input";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Generative_input createGenerative_input(String name) {
        final RDFSNamedClass cls = getGenerative_inputClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultGenerative_input(owlModel, cls.createInstance(name).getFrameID());
    }

    public Generative_input getGenerative_input(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Generative_input) {
            return (Generative_input) res;
        } else if (res.hasProtegeType(getGenerative_inputClass())) {
            return new DefaultGenerative_input(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<Generative_input> getAllGenerative_inputInstances() {
        return getAllGenerative_inputInstances(false);
    }

    public Set<Generative_input> getAllGenerative_inputInstances(boolean transitive) {
        Set<Generative_input> result = new HashSet<Generative_input>();
        final RDFSNamedClass cls = getGenerative_inputClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultGenerative_input(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getMTheoryClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#MTheory";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public MTheory createMTheory(String name) {
        final RDFSNamedClass cls = getMTheoryClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultMTheory(owlModel, cls.createInstance(name).getFrameID());
    }

    public MTheory getMTheory(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof MTheory) {
            return (MTheory) res;
        } else if (res.hasProtegeType(getMTheoryClass())) {
            return new DefaultMTheory(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<MTheory> getAllMTheoryInstances() {
        return getAllMTheoryInstances(false);
    }

    public Set<MTheory> getAllMTheoryInstances(boolean transitive) {
        Set<MTheory> result = new HashSet<MTheory>();
        final RDFSNamedClass cls = getMTheoryClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultMTheory(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getMetaEntityClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#MetaEntity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public MetaEntity createMetaEntity(String name) {
        final RDFSNamedClass cls = getMetaEntityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultMetaEntity(owlModel, cls.createInstance(name).getFrameID());
    }

    public MetaEntity getMetaEntity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof MetaEntity) {
            return (MetaEntity) res;
        } else if (res.hasProtegeType(getMetaEntityClass())) {
            return new DefaultMetaEntity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<MetaEntity> getAllMetaEntityInstances() {
        return getAllMetaEntityInstances(false);
    }

    public Set<MetaEntity> getAllMetaEntityInstances(boolean transitive) {
        Set<MetaEntity> result = new HashSet<MetaEntity>();
        final RDFSNamedClass cls = getMetaEntityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultMetaEntity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getObjectEntityClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#ObjectEntity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ObjectEntity createObjectEntity(String name) {
        final RDFSNamedClass cls = getObjectEntityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultObjectEntity(owlModel, cls.createInstance(name).getFrameID());
    }

    public ObjectEntity getObjectEntity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ObjectEntity) {
            return (ObjectEntity) res;
        } else if (res.hasProtegeType(getObjectEntityClass())) {
            return new DefaultObjectEntity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<ObjectEntity> getAllObjectEntityInstances() {
        return getAllObjectEntityInstances(false);
    }

    public Set<ObjectEntity> getAllObjectEntityInstances(boolean transitive) {
        Set<ObjectEntity> result = new HashSet<ObjectEntity>();
        final RDFSNamedClass cls = getObjectEntityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultObjectEntity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getPR_OWLTableClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#PR-OWLTable";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PR_OWLTable createPR_OWLTable(String name) {
        final RDFSNamedClass cls = getPR_OWLTableClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultPR_OWLTable(owlModel, cls.createInstance(name).getFrameID());
    }

    public PR_OWLTable getPR_OWLTable(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof PR_OWLTable) {
            return (PR_OWLTable) res;
        } else if (res.hasProtegeType(getPR_OWLTableClass())) {
            return new DefaultPR_OWLTable(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<PR_OWLTable> getAllPR_OWLTableInstances() {
        return getAllPR_OWLTableInstances(false);
    }

    public Set<PR_OWLTable> getAllPR_OWLTableInstances(boolean transitive) {
        Set<PR_OWLTable> result = new HashSet<PR_OWLTable>();
        final RDFSNamedClass cls = getPR_OWLTableClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultPR_OWLTable(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getProbAssignClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#ProbAssign";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ProbAssign createProbAssign(String name) {
        final RDFSNamedClass cls = getProbAssignClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultProbAssign(owlModel, cls.createInstance(name).getFrameID());
    }

    public ProbAssign getProbAssign(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ProbAssign) {
            return (ProbAssign) res;
        } else if (res.hasProtegeType(getProbAssignClass())) {
            return new DefaultProbAssign(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<ProbAssign> getAllProbAssignInstances() {
        return getAllProbAssignInstances(false);
    }

    public Set<ProbAssign> getAllProbAssignInstances(boolean transitive) {
        Set<ProbAssign> result = new HashSet<ProbAssign>();
        final RDFSNamedClass cls = getProbAssignClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultProbAssign(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSimpleArgRelationshipClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#SimpleArgRelationship";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SimpleArgRelationship createSimpleArgRelationship(String name) {
        final RDFSNamedClass cls = getSimpleArgRelationshipClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSimpleArgRelationship(owlModel, cls.createInstance(name).getFrameID());
    }

    public SimpleArgRelationship getSimpleArgRelationship(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof SimpleArgRelationship) {
            return (SimpleArgRelationship) res;
        } else if (res.hasProtegeType(getSimpleArgRelationshipClass())) {
            return new DefaultSimpleArgRelationship(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<SimpleArgRelationship> getAllSimpleArgRelationshipInstances() {
        return getAllSimpleArgRelationshipInstances(false);
    }

    public Set<SimpleArgRelationship> getAllSimpleArgRelationshipInstances(boolean transitive) {
        Set<SimpleArgRelationship> result = new HashSet<SimpleArgRelationship>();
        final RDFSNamedClass cls = getSimpleArgRelationshipClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSimpleArgRelationship(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHypothesisNodeClass() {
        final String uri = "http://www.owl-ontologies.com/BayesianDiagnosis.owl#HypothesisNode";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public HypothesisNode createHypothesisNode(String name) {
        final RDFSNamedClass cls = getHypothesisNodeClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHypothesisNode(owlModel, cls.createInstance(name).getFrameID());
    }

    public HypothesisNode getHypothesisNode(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof HypothesisNode) {
            return (HypothesisNode) res;
        } else if (res.hasProtegeType(getHypothesisNodeClass())) {
            return new DefaultHypothesisNode(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<HypothesisNode> getAllHypothesisNodeInstances() {
        return getAllHypothesisNodeInstances(false);
    }

    public Set<HypothesisNode> getAllHypothesisNodeInstances(boolean transitive) {
        Set<HypothesisNode> result = new HashSet<HypothesisNode>();
        final RDFSNamedClass cls = getHypothesisNodeClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHypothesisNode(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getObservationNodeClass() {
        final String uri = "http://www.owl-ontologies.com/BayesianDiagnosis.owl#ObservationNode";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ObservationNode createObservationNode(String name) {
        final RDFSNamedClass cls = getObservationNodeClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultObservationNode(owlModel, cls.createInstance(name).getFrameID());
    }

    public ObservationNode getObservationNode(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ObservationNode) {
            return (ObservationNode) res;
        } else if (res.hasProtegeType(getObservationNodeClass())) {
            return new DefaultObservationNode(owlModel, res.getFrameID());
        }
        return null;
    }

    public Set<ObservationNode> getAllObservationNodeInstances() {
        return getAllObservationNodeInstances(false);
    }

    public Set<ObservationNode> getAllObservationNodeInstances(boolean transitive) {
        Set<ObservationNode> result = new HashSet<ObservationNode>();
        final RDFSNamedClass cls = getObservationNodeClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultObservationNode(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFProperty getExpectedBenefitProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#expectedBenefit";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIdProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#id";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHypothesisConfidenceProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hypothesisConfidence";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getWhenHasBeenPerformedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#whenHasBeenPerformed";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getSatisfiedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#satisfied";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#performed";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getSuccessfullyPerformedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#successfullyPerformed";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getAvailableProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#available";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getVariableValueProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#variableValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getVariableTypeProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#variableType";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasRuleCategoryProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasRuleCategory";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasBuiltInPhraseProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasBuiltInPhrase";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsRuleEnabledProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsRuleGroupEnabledProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleGroupEnabled";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasClassPhraseProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasClassPhrase";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPropertyPhraseProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasPropertyPhrase";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasArgNumberProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasArgNumber";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasDeclarationProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasDeclaration";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasStateProbProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasStateProb";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasUIDProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasUID";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasVerticalPositionProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasVerticalPosition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsDefaultProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isDefault";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsGloballyExclusiveProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isGloballyExclusive";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsRepresentedAsProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isRepresentedAs";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPreconditionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasPrecondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getStartsDiagnosisProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#startsDiagnosis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getStartedBySymptomProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#startedBySymptom";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformedTestActionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#performedTestAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformedActionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#performedAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getRepairsFailureProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#repairsFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCanBeRepairedWithProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#canBeRepairedWith";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformedHealingActionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#performedHealingAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsPartOfProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isPartOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsComposedByProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isComposedBy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasConnectionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasConnection";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsPartOfNetworkProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isPartOfNetwork";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasBeenPerformedByProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasBeenPerformedBy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPerformedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasPerformed";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCanBePerformedByProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#canBePerformedBy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCanPerformProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#canPerform";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasAgentResidingProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasAgentResiding";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasConditionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasHypothesisProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasHypothesis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getConnectsSystemProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#connectsSystem";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsConnectedByProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isConnectedBy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasDeviceProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasDevice";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getBelongsToNetworkProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#belongsToNetwork";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPostconditionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasPostcondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasDataProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasData";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsExecutingInProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isExecutingIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getRepresentsPossibleFailureProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#representsPossibleFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResidesInProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#residesIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasLocationProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasLocation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasFailureProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasRuleGroupProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasRuleGroup";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasArgTermProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasArgTerm";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsArgTermInProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isArgTermIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasArgumentProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasArgument";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsArgumentOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isArgumentOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasConditionantProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasConditionant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsConditionantOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isConditionantOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasContextInstanceProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasContextInstance";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsContextInstanceOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isContextInstanceOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasContextNodeProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasContextNode";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsContextNodeInProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isContextNodeIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasExemplarProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasExemplar";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsExemplarInProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isExemplarIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasInnerTermProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasInnerTerm";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsInnerTermOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isInnerTermOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasInputInstanceProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasInputInstance";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsInputInstanceOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isInputInstanceOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasInputNodeProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasInputNode";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsInputNodeInProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isInputNodeIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasMFragProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasMFrag";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsMFragOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isMFragOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasNodeProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasNode";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsNodeFromProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isNodeFrom";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasOVariableProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasOVariable";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsOVariableInProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isOVariableIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasParentProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasParent";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsParentOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isParentOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasParentNameProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasParentName";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasParentStateProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasParentState";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPossibleValuesProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasPossibleValues";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsPossibleValueOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isPossibleValueOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasProbAssignProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasProbAssign";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsProbAssignInProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isProbAssignIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasProbDistProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasProbDist";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsProbDistOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isProbDistOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasResidentNodeProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasResidentNode";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsResidentNodeInProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isResidentNodeIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasStateNameProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasStateName";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasTypeProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasType";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsTypeOfProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isTypeOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsRepBySkolemProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isRepBySkolem";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getRepresentsOVarProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#representsOVar";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsSubsByProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#isSubsBy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getSubsOVarProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#subsOVar";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasBayesianHypothesisProperty() {
        final String uri = "http://www.owl-ontologies.com/BayesianDiagnosis.owl#hasBayesianHypothesis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasBayesianObservationProperty() {
        final String uri = "http://www.owl-ontologies.com/BayesianDiagnosis.owl#hasBayesianObservation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getObjectProperty_8Property() {
        final String uri = "http://www.owl-ontologies.com/BayesianDiagnosis.owl#ObjectProperty_8";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }
}
