package es.upm.dit.gsi.ontology;

import edu.stanford.smi.protegex.owl.model.*;

import java.util.*;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.pr-owl.org/pr-owl.owl#Finding_res
 *
 * @version generated on Fri Apr 01 15:09:42 CEST 2011
 */
public interface Finding_res extends Resident {

    // Property http://www.pr-owl.org/pr-owl.owl#hasParent

    Set getHasParent();

    RDFProperty getHasParentProperty();

    boolean hasHasParent();

    void setHasParent(Finding_input newHasParent);


    // Property http://www.pr-owl.org/pr-owl.owl#hasPossibleValues

    Set getHasPossibleValues();

    RDFProperty getHasPossibleValuesProperty();

    boolean hasHasPossibleValues();

    Iterator listHasPossibleValues();

    void addHasPossibleValues(Entity newHasPossibleValues);

    void removeHasPossibleValues(Entity oldHasPossibleValues);

    void setHasPossibleValues(Set newHasPossibleValues);


    // Property http://www.pr-owl.org/pr-owl.owl#isParentOf

    Set getIsParentOf();

    RDFProperty getIsParentOfProperty();

    boolean hasIsParentOf();

    void setIsParentOf(Resident newIsParentOf);


    // Property http://www.pr-owl.org/pr-owl.owl#isResidentNodeIn

    Set getIsResidentNodeIn();

    RDFProperty getIsResidentNodeInProperty();

    boolean hasIsResidentNodeIn();

    Iterator listIsResidentNodeIn();

    void addIsResidentNodeIn(Finding_MFrag newIsResidentNodeIn);

    void removeIsResidentNodeIn(Finding_MFrag oldIsResidentNodeIn);

    void setIsResidentNodeIn(Set newIsResidentNodeIn);
}
