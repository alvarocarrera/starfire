package es.upm.dit.gsi.commune.ontology;


import es.upm.dit.gsi.commune.ontology.impl.*;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.*;
import edu.stanford.smi.protegex.owl.model.impl.OWLUtil;
import edu.stanford.smi.protegex.owl.javacode.ProtegeJavaMapping;

import java.util.*;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 *
 * @version generated on Tue Apr 05 14:50:26 CEST 2011
 */
public class MyFactory {

    private OWLModel owlModel;

    static {
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Diagnosis", Diagnosis.class, DefaultDiagnosis.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Device", Device.class, DefaultDevice.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#System", System.class, DefaultSystem.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Subsystem", Subsystem.class, DefaultSubsystem.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#HardwareSystem", HardwareSystem.class, DefaultHardwareSystem.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#SoftwareSystem", SoftwareSystem.class, DefaultSoftwareSystem.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Failure", Failure.class, DefaultFailure.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#UnsatisfiedCondition", UnsatisfiedCondition.class, DefaultUnsatisfiedCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#SatisfiedCondition", SatisfiedCondition.class, DefaultSatisfiedCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Condition", Condition.class, DefaultCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Human", Human.class, DefaultHuman.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Actor", Actor.class, DefaultActor.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Agent", Agent.class, DefaultAgent.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#UnsuccessfulyPerformedAction", UnsuccessfulyPerformedAction.class, DefaultUnsuccessfulyPerformedAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#SuccessfulyPerformedAction", SuccessfulyPerformedAction.class, DefaultSuccessfulyPerformedAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#PerformedAction", PerformedAction.class, DefaultPerformedAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Network", Network.class, DefaultNetwork.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Symptom", Symptom.class, DefaultSymptom.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#MonitoringAction", MonitoringAction.class, DefaultMonitoringAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#TestAction", TestAction.class, DefaultTestAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#HealingAction", HealingAction.class, DefaultHealingAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#EnvironmentAction", EnvironmentAction.class, DefaultEnvironmentAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Action", Action.class, DefaultAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#RequiredActorCondition", RequiredActorCondition.class, DefaultRequiredActorCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Connection", Connection.class, DefaultConnection.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#AvailableAction", AvailableAction.class, DefaultAvailableAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#UnavailableAction", UnavailableAction.class, DefaultUnavailableAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Hypothesis", Hypothesis.class, DefaultHypothesis.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Variable", Variable.class, DefaultVariable.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Diagnosis.owl#Observation", Observation.class, DefaultObservation.class);
        ProtegeJavaMapping.add("http://swrl.stanford.edu/ontologies/3.3/swrla.owl#Entity", Entity.class, DefaultEntity.class);
        ProtegeJavaMapping.add("http://swrl.stanford.edu/ontologies/3.3/swrla.owl#RuleGroup", RuleGroup.class, DefaultRuleGroup.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/BayesianDiagnosis.owl#HypothesisNode", HypothesisNode.class, DefaultHypothesisNode.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/BayesianDiagnosis.owl#ObservationNode", ObservationNode.class, DefaultObservationNode.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#RequiredDataCondition", RequiredDataCondition.class, DefaultRequiredDataCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#SystemTestAction", SystemTestAction.class, DefaultSystemTestAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#RequiredMinimumConfidenceCondition", RequiredMinimumConfidenceCondition.class, DefaultRequiredMinimumConfidenceCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#DeviceFailure", DeviceFailure.class, DefaultDeviceFailure.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#ClientAgent", ClientAgent.class, DefaultClientAgent.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#RTPSession", RTPSession.class, DefaultRTPSession.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#Session", Session.class, DefaultSession.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#ClientToRouter", ClientToRouter.class, DefaultClientToRouter.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#ConnectionFailure", ConnectionFailure.class, DefaultConnectionFailure.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#UsageMemoryTest", UsageMemoryTest.class, DefaultUsageMemoryTest.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#ConnectivityTestAction", ConnectivityTestAction.class, DefaultConnectivityTestAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#ServerMemoryFailure", ServerMemoryFailure.class, DefaultServerMemoryFailure.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#UsageCPUTest", UsageCPUTest.class, DefaultUsageCPUTest.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#KillProcess", KillProcess.class, DefaultKillProcess.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#IP", IP.class, DefaultIP.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#ServerCPUFailure", ServerCPUFailure.class, DefaultServerCPUFailure.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#RTPMonitoringAction", RTPMonitoringAction.class, DefaultRTPMonitoringAction.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#RequiredStreamingSessionCondition", RequiredStreamingSessionCondition.class, DefaultRequiredStreamingSessionCondition.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#RouterIP", RouterIP.class, DefaultRouterIP.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#SmartPhone", SmartPhone.class, DefaultSmartPhone.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#DetectedJitter", DetectedJitter.class, DefaultDetectedJitter.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#NetworkInterfaceRateTest", NetworkInterfaceRateTest.class, DefaultNetworkInterfaceRateTest.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/P2PDiagnosis.owl#PC", PC.class, DefaultPC.class);
        ProtegeJavaMapping.add("http://www.pr-owl.org/pr-owl.owl#Node", Node.class, DefaultNode.class);
    }

    public MyFactory(OWLModel owlModel) {
        this.owlModel = owlModel;
    }

    public <X> X create(Class<? extends X> javaInterface, String name) {
        return ProtegeJavaMapping.create(owlModel, javaInterface, name);
    }


    public RDFSNamedClass getDiagnosisClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Diagnosis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Diagnosis createDiagnosis(String name) {
        final RDFSNamedClass cls = getDiagnosisClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultDiagnosis(owlModel, cls.createInstance(name).getFrameID());
    }

    public Diagnosis getDiagnosis(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Diagnosis) {
            return (Diagnosis) res;
        } else if (res.hasProtegeType(getDiagnosisClass())) {
            return new DefaultDiagnosis(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Diagnosis> getAllDiagnosisInstances() {
        return getAllDiagnosisInstances(false);
    }

    public Collection<Diagnosis> getAllDiagnosisInstances(boolean transitive) {
        Collection<Diagnosis> result = new ArrayList<Diagnosis>();
        final RDFSNamedClass cls = getDiagnosisClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDiagnosis(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getDeviceClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Device";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Device createDevice(String name) {
        final RDFSNamedClass cls = getDeviceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultDevice(owlModel, cls.createInstance(name).getFrameID());
    }

    public Device getDevice(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Device) {
            return (Device) res;
        } else if (res.hasProtegeType(getDeviceClass())) {
            return new DefaultDevice(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Device> getAllDeviceInstances() {
        return getAllDeviceInstances(false);
    }

    public Collection<Device> getAllDeviceInstances(boolean transitive) {
        Collection<Device> result = new ArrayList<Device>();
        final RDFSNamedClass cls = getDeviceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDevice(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSystemClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#System";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public System createSystem(String name) {
        final RDFSNamedClass cls = getSystemClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSystem(owlModel, cls.createInstance(name).getFrameID());
    }

    public System getSystem(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof System) {
            return (System) res;
        } else if (res.hasProtegeType(getSystemClass())) {
            return new DefaultSystem(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<System> getAllSystemInstances() {
        return getAllSystemInstances(false);
    }

    public Collection<System> getAllSystemInstances(boolean transitive) {
        Collection<System> result = new ArrayList<System>();
        final RDFSNamedClass cls = getSystemClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSystem(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSubsystemClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Subsystem";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Subsystem createSubsystem(String name) {
        final RDFSNamedClass cls = getSubsystemClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSubsystem(owlModel, cls.createInstance(name).getFrameID());
    }

    public Subsystem getSubsystem(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Subsystem) {
            return (Subsystem) res;
        } else if (res.hasProtegeType(getSubsystemClass())) {
            return new DefaultSubsystem(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Subsystem> getAllSubsystemInstances() {
        return getAllSubsystemInstances(false);
    }

    public Collection<Subsystem> getAllSubsystemInstances(boolean transitive) {
        Collection<Subsystem> result = new ArrayList<Subsystem>();
        final RDFSNamedClass cls = getSubsystemClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSubsystem(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHardwareSystemClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#HardwareSystem";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public HardwareSystem createHardwareSystem(String name) {
        final RDFSNamedClass cls = getHardwareSystemClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHardwareSystem(owlModel, cls.createInstance(name).getFrameID());
    }

    public HardwareSystem getHardwareSystem(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof HardwareSystem) {
            return (HardwareSystem) res;
        } else if (res.hasProtegeType(getHardwareSystemClass())) {
            return new DefaultHardwareSystem(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<HardwareSystem> getAllHardwareSystemInstances() {
        return getAllHardwareSystemInstances(false);
    }

    public Collection<HardwareSystem> getAllHardwareSystemInstances(boolean transitive) {
        Collection<HardwareSystem> result = new ArrayList<HardwareSystem>();
        final RDFSNamedClass cls = getHardwareSystemClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHardwareSystem(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSoftwareSystemClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#SoftwareSystem";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SoftwareSystem createSoftwareSystem(String name) {
        final RDFSNamedClass cls = getSoftwareSystemClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSoftwareSystem(owlModel, cls.createInstance(name).getFrameID());
    }

    public SoftwareSystem getSoftwareSystem(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof SoftwareSystem) {
            return (SoftwareSystem) res;
        } else if (res.hasProtegeType(getSoftwareSystemClass())) {
            return new DefaultSoftwareSystem(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<SoftwareSystem> getAllSoftwareSystemInstances() {
        return getAllSoftwareSystemInstances(false);
    }

    public Collection<SoftwareSystem> getAllSoftwareSystemInstances(boolean transitive) {
        Collection<SoftwareSystem> result = new ArrayList<SoftwareSystem>();
        final RDFSNamedClass cls = getSoftwareSystemClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSoftwareSystem(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getFailureClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Failure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Failure createFailure(String name) {
        final RDFSNamedClass cls = getFailureClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultFailure(owlModel, cls.createInstance(name).getFrameID());
    }

    public Failure getFailure(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Failure) {
            return (Failure) res;
        } else if (res.hasProtegeType(getFailureClass())) {
            return new DefaultFailure(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Failure> getAllFailureInstances() {
        return getAllFailureInstances(false);
    }

    public Collection<Failure> getAllFailureInstances(boolean transitive) {
        Collection<Failure> result = new ArrayList<Failure>();
        final RDFSNamedClass cls = getFailureClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultFailure(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getUnsatisfiedConditionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#UnsatisfiedCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UnsatisfiedCondition createUnsatisfiedCondition(String name) {
        final RDFSNamedClass cls = getUnsatisfiedConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultUnsatisfiedCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public UnsatisfiedCondition getUnsatisfiedCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof UnsatisfiedCondition) {
            return (UnsatisfiedCondition) res;
        } else if (res.hasProtegeType(getUnsatisfiedConditionClass())) {
            return new DefaultUnsatisfiedCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<UnsatisfiedCondition> getAllUnsatisfiedConditionInstances() {
        return getAllUnsatisfiedConditionInstances(false);
    }

    public Collection<UnsatisfiedCondition> getAllUnsatisfiedConditionInstances(boolean transitive) {
        Collection<UnsatisfiedCondition> result = new ArrayList<UnsatisfiedCondition>();
        final RDFSNamedClass cls = getUnsatisfiedConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultUnsatisfiedCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSatisfiedConditionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#SatisfiedCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SatisfiedCondition createSatisfiedCondition(String name) {
        final RDFSNamedClass cls = getSatisfiedConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSatisfiedCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public SatisfiedCondition getSatisfiedCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof SatisfiedCondition) {
            return (SatisfiedCondition) res;
        } else if (res.hasProtegeType(getSatisfiedConditionClass())) {
            return new DefaultSatisfiedCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<SatisfiedCondition> getAllSatisfiedConditionInstances() {
        return getAllSatisfiedConditionInstances(false);
    }

    public Collection<SatisfiedCondition> getAllSatisfiedConditionInstances(boolean transitive) {
        Collection<SatisfiedCondition> result = new ArrayList<SatisfiedCondition>();
        final RDFSNamedClass cls = getSatisfiedConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSatisfiedCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getConditionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Condition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Condition createCondition(String name) {
        final RDFSNamedClass cls = getConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public Condition getCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Condition) {
            return (Condition) res;
        } else if (res.hasProtegeType(getConditionClass())) {
            return new DefaultCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Condition> getAllConditionInstances() {
        return getAllConditionInstances(false);
    }

    public Collection<Condition> getAllConditionInstances(boolean transitive) {
        Collection<Condition> result = new ArrayList<Condition>();
        final RDFSNamedClass cls = getConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHumanClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Human";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Human createHuman(String name) {
        final RDFSNamedClass cls = getHumanClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHuman(owlModel, cls.createInstance(name).getFrameID());
    }

    public Human getHuman(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Human) {
            return (Human) res;
        } else if (res.hasProtegeType(getHumanClass())) {
            return new DefaultHuman(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Human> getAllHumanInstances() {
        return getAllHumanInstances(false);
    }

    public Collection<Human> getAllHumanInstances(boolean transitive) {
        Collection<Human> result = new ArrayList<Human>();
        final RDFSNamedClass cls = getHumanClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHuman(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getActorClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Actor";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Actor createActor(String name) {
        final RDFSNamedClass cls = getActorClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultActor(owlModel, cls.createInstance(name).getFrameID());
    }

    public Actor getActor(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Actor) {
            return (Actor) res;
        } else if (res.hasProtegeType(getActorClass())) {
            return new DefaultActor(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Actor> getAllActorInstances() {
        return getAllActorInstances(false);
    }

    public Collection<Actor> getAllActorInstances(boolean transitive) {
        Collection<Actor> result = new ArrayList<Actor>();
        final RDFSNamedClass cls = getActorClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultActor(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getAgentClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Agent";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Agent createAgent(String name) {
        final RDFSNamedClass cls = getAgentClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultAgent(owlModel, cls.createInstance(name).getFrameID());
    }

    public Agent getAgent(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Agent) {
            return (Agent) res;
        } else if (res.hasProtegeType(getAgentClass())) {
            return new DefaultAgent(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Agent> getAllAgentInstances() {
        return getAllAgentInstances(false);
    }

    public Collection<Agent> getAllAgentInstances(boolean transitive) {
        Collection<Agent> result = new ArrayList<Agent>();
        final RDFSNamedClass cls = getAgentClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultAgent(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getUnsuccessfulyPerformedActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#UnsuccessfulyPerformedAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UnsuccessfulyPerformedAction createUnsuccessfulyPerformedAction(String name) {
        final RDFSNamedClass cls = getUnsuccessfulyPerformedActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultUnsuccessfulyPerformedAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public UnsuccessfulyPerformedAction getUnsuccessfulyPerformedAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof UnsuccessfulyPerformedAction) {
            return (UnsuccessfulyPerformedAction) res;
        } else if (res.hasProtegeType(getUnsuccessfulyPerformedActionClass())) {
            return new DefaultUnsuccessfulyPerformedAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<UnsuccessfulyPerformedAction> getAllUnsuccessfulyPerformedActionInstances() {
        return getAllUnsuccessfulyPerformedActionInstances(false);
    }

    public Collection<UnsuccessfulyPerformedAction> getAllUnsuccessfulyPerformedActionInstances(boolean transitive) {
        Collection<UnsuccessfulyPerformedAction> result = new ArrayList<UnsuccessfulyPerformedAction>();
        final RDFSNamedClass cls = getUnsuccessfulyPerformedActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultUnsuccessfulyPerformedAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSuccessfulyPerformedActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#SuccessfulyPerformedAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SuccessfulyPerformedAction createSuccessfulyPerformedAction(String name) {
        final RDFSNamedClass cls = getSuccessfulyPerformedActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSuccessfulyPerformedAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public SuccessfulyPerformedAction getSuccessfulyPerformedAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof SuccessfulyPerformedAction) {
            return (SuccessfulyPerformedAction) res;
        } else if (res.hasProtegeType(getSuccessfulyPerformedActionClass())) {
            return new DefaultSuccessfulyPerformedAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<SuccessfulyPerformedAction> getAllSuccessfulyPerformedActionInstances() {
        return getAllSuccessfulyPerformedActionInstances(false);
    }

    public Collection<SuccessfulyPerformedAction> getAllSuccessfulyPerformedActionInstances(boolean transitive) {
        Collection<SuccessfulyPerformedAction> result = new ArrayList<SuccessfulyPerformedAction>();
        final RDFSNamedClass cls = getSuccessfulyPerformedActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSuccessfulyPerformedAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getPerformedActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#PerformedAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PerformedAction createPerformedAction(String name) {
        final RDFSNamedClass cls = getPerformedActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultPerformedAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public PerformedAction getPerformedAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof PerformedAction) {
            return (PerformedAction) res;
        } else if (res.hasProtegeType(getPerformedActionClass())) {
            return new DefaultPerformedAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<PerformedAction> getAllPerformedActionInstances() {
        return getAllPerformedActionInstances(false);
    }

    public Collection<PerformedAction> getAllPerformedActionInstances(boolean transitive) {
        Collection<PerformedAction> result = new ArrayList<PerformedAction>();
        final RDFSNamedClass cls = getPerformedActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultPerformedAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getNetworkClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Network";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Network createNetwork(String name) {
        final RDFSNamedClass cls = getNetworkClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultNetwork(owlModel, cls.createInstance(name).getFrameID());
    }

    public Network getNetwork(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Network) {
            return (Network) res;
        } else if (res.hasProtegeType(getNetworkClass())) {
            return new DefaultNetwork(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Network> getAllNetworkInstances() {
        return getAllNetworkInstances(false);
    }

    public Collection<Network> getAllNetworkInstances(boolean transitive) {
        Collection<Network> result = new ArrayList<Network>();
        final RDFSNamedClass cls = getNetworkClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultNetwork(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSymptomClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Symptom";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Symptom createSymptom(String name) {
        final RDFSNamedClass cls = getSymptomClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSymptom(owlModel, cls.createInstance(name).getFrameID());
    }

    public Symptom getSymptom(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Symptom) {
            return (Symptom) res;
        } else if (res.hasProtegeType(getSymptomClass())) {
            return new DefaultSymptom(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Symptom> getAllSymptomInstances() {
        return getAllSymptomInstances(false);
    }

    public Collection<Symptom> getAllSymptomInstances(boolean transitive) {
        Collection<Symptom> result = new ArrayList<Symptom>();
        final RDFSNamedClass cls = getSymptomClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSymptom(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getMonitoringActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#MonitoringAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public MonitoringAction createMonitoringAction(String name) {
        final RDFSNamedClass cls = getMonitoringActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultMonitoringAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public MonitoringAction getMonitoringAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof MonitoringAction) {
            return (MonitoringAction) res;
        } else if (res.hasProtegeType(getMonitoringActionClass())) {
            return new DefaultMonitoringAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<MonitoringAction> getAllMonitoringActionInstances() {
        return getAllMonitoringActionInstances(false);
    }

    public Collection<MonitoringAction> getAllMonitoringActionInstances(boolean transitive) {
        Collection<MonitoringAction> result = new ArrayList<MonitoringAction>();
        final RDFSNamedClass cls = getMonitoringActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultMonitoringAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getTestActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#TestAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public TestAction createTestAction(String name) {
        final RDFSNamedClass cls = getTestActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultTestAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public TestAction getTestAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof TestAction) {
            return (TestAction) res;
        } else if (res.hasProtegeType(getTestActionClass())) {
            return new DefaultTestAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<TestAction> getAllTestActionInstances() {
        return getAllTestActionInstances(false);
    }

    public Collection<TestAction> getAllTestActionInstances(boolean transitive) {
        Collection<TestAction> result = new ArrayList<TestAction>();
        final RDFSNamedClass cls = getTestActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultTestAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHealingActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#HealingAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public HealingAction createHealingAction(String name) {
        final RDFSNamedClass cls = getHealingActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHealingAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public HealingAction getHealingAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof HealingAction) {
            return (HealingAction) res;
        } else if (res.hasProtegeType(getHealingActionClass())) {
            return new DefaultHealingAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<HealingAction> getAllHealingActionInstances() {
        return getAllHealingActionInstances(false);
    }

    public Collection<HealingAction> getAllHealingActionInstances(boolean transitive) {
        Collection<HealingAction> result = new ArrayList<HealingAction>();
        final RDFSNamedClass cls = getHealingActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHealingAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getEnvironmentActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#EnvironmentAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public EnvironmentAction createEnvironmentAction(String name) {
        final RDFSNamedClass cls = getEnvironmentActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultEnvironmentAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public EnvironmentAction getEnvironmentAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof EnvironmentAction) {
            return (EnvironmentAction) res;
        } else if (res.hasProtegeType(getEnvironmentActionClass())) {
            return new DefaultEnvironmentAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<EnvironmentAction> getAllEnvironmentActionInstances() {
        return getAllEnvironmentActionInstances(false);
    }

    public Collection<EnvironmentAction> getAllEnvironmentActionInstances(boolean transitive) {
        Collection<EnvironmentAction> result = new ArrayList<EnvironmentAction>();
        final RDFSNamedClass cls = getEnvironmentActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultEnvironmentAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Action";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Action createAction(String name) {
        final RDFSNamedClass cls = getActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public Action getAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Action) {
            return (Action) res;
        } else if (res.hasProtegeType(getActionClass())) {
            return new DefaultAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Action> getAllActionInstances() {
        return getAllActionInstances(false);
    }

    public Collection<Action> getAllActionInstances(boolean transitive) {
        Collection<Action> result = new ArrayList<Action>();
        final RDFSNamedClass cls = getActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRequiredActorConditionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#RequiredActorCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RequiredActorCondition createRequiredActorCondition(String name) {
        final RDFSNamedClass cls = getRequiredActorConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRequiredActorCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public RequiredActorCondition getRequiredActorCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RequiredActorCondition) {
            return (RequiredActorCondition) res;
        } else if (res.hasProtegeType(getRequiredActorConditionClass())) {
            return new DefaultRequiredActorCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<RequiredActorCondition> getAllRequiredActorConditionInstances() {
        return getAllRequiredActorConditionInstances(false);
    }

    public Collection<RequiredActorCondition> getAllRequiredActorConditionInstances(boolean transitive) {
        Collection<RequiredActorCondition> result = new ArrayList<RequiredActorCondition>();
        final RDFSNamedClass cls = getRequiredActorConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRequiredActorCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getConnectionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Connection";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Connection createConnection(String name) {
        final RDFSNamedClass cls = getConnectionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultConnection(owlModel, cls.createInstance(name).getFrameID());
    }

    public Connection getConnection(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Connection) {
            return (Connection) res;
        } else if (res.hasProtegeType(getConnectionClass())) {
            return new DefaultConnection(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Connection> getAllConnectionInstances() {
        return getAllConnectionInstances(false);
    }

    public Collection<Connection> getAllConnectionInstances(boolean transitive) {
        Collection<Connection> result = new ArrayList<Connection>();
        final RDFSNamedClass cls = getConnectionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultConnection(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getAvailableActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#AvailableAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public AvailableAction createAvailableAction(String name) {
        final RDFSNamedClass cls = getAvailableActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultAvailableAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public AvailableAction getAvailableAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof AvailableAction) {
            return (AvailableAction) res;
        } else if (res.hasProtegeType(getAvailableActionClass())) {
            return new DefaultAvailableAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<AvailableAction> getAllAvailableActionInstances() {
        return getAllAvailableActionInstances(false);
    }

    public Collection<AvailableAction> getAllAvailableActionInstances(boolean transitive) {
        Collection<AvailableAction> result = new ArrayList<AvailableAction>();
        final RDFSNamedClass cls = getAvailableActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultAvailableAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getUnavailableActionClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#UnavailableAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UnavailableAction createUnavailableAction(String name) {
        final RDFSNamedClass cls = getUnavailableActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultUnavailableAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public UnavailableAction getUnavailableAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof UnavailableAction) {
            return (UnavailableAction) res;
        } else if (res.hasProtegeType(getUnavailableActionClass())) {
            return new DefaultUnavailableAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<UnavailableAction> getAllUnavailableActionInstances() {
        return getAllUnavailableActionInstances(false);
    }

    public Collection<UnavailableAction> getAllUnavailableActionInstances(boolean transitive) {
        Collection<UnavailableAction> result = new ArrayList<UnavailableAction>();
        final RDFSNamedClass cls = getUnavailableActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultUnavailableAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHypothesisClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Hypothesis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Hypothesis createHypothesis(String name) {
        final RDFSNamedClass cls = getHypothesisClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHypothesis(owlModel, cls.createInstance(name).getFrameID());
    }

    public Hypothesis getHypothesis(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Hypothesis) {
            return (Hypothesis) res;
        } else if (res.hasProtegeType(getHypothesisClass())) {
            return new DefaultHypothesis(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Hypothesis> getAllHypothesisInstances() {
        return getAllHypothesisInstances(false);
    }

    public Collection<Hypothesis> getAllHypothesisInstances(boolean transitive) {
        Collection<Hypothesis> result = new ArrayList<Hypothesis>();
        final RDFSNamedClass cls = getHypothesisClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHypothesis(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getVariableClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Variable";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Variable createVariable(String name) {
        final RDFSNamedClass cls = getVariableClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultVariable(owlModel, cls.createInstance(name).getFrameID());
    }

    public Variable getVariable(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Variable) {
            return (Variable) res;
        } else if (res.hasProtegeType(getVariableClass())) {
            return new DefaultVariable(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Variable> getAllVariableInstances() {
        return getAllVariableInstances(false);
    }

    public Collection<Variable> getAllVariableInstances(boolean transitive) {
        Collection<Variable> result = new ArrayList<Variable>();
        final RDFSNamedClass cls = getVariableClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultVariable(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getObservationClass() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#Observation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Observation createObservation(String name) {
        final RDFSNamedClass cls = getObservationClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultObservation(owlModel, cls.createInstance(name).getFrameID());
    }

    public Observation getObservation(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Observation) {
            return (Observation) res;
        } else if (res.hasProtegeType(getObservationClass())) {
            return new DefaultObservation(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Observation> getAllObservationInstances() {
        return getAllObservationInstances(false);
    }

    public Collection<Observation> getAllObservationInstances(boolean transitive) {
        Collection<Observation> result = new ArrayList<Observation>();
        final RDFSNamedClass cls = getObservationClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultObservation(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getEntityClass() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#Entity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Entity createEntity(String name) {
        final RDFSNamedClass cls = getEntityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultEntity(owlModel, cls.createInstance(name).getFrameID());
    }

    public Entity getEntity(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Entity) {
            return (Entity) res;
        } else if (res.hasProtegeType(getEntityClass())) {
            return new DefaultEntity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Entity> getAllEntityInstances() {
        return getAllEntityInstances(false);
    }

    public Collection<Entity> getAllEntityInstances(boolean transitive) {
        Collection<Entity> result = new ArrayList<Entity>();
        final RDFSNamedClass cls = getEntityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultEntity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRuleGroupClass() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#RuleGroup";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RuleGroup createRuleGroup(String name) {
        final RDFSNamedClass cls = getRuleGroupClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRuleGroup(owlModel, cls.createInstance(name).getFrameID());
    }

    public RuleGroup getRuleGroup(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RuleGroup) {
            return (RuleGroup) res;
        } else if (res.hasProtegeType(getRuleGroupClass())) {
            return new DefaultRuleGroup(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<RuleGroup> getAllRuleGroupInstances() {
        return getAllRuleGroupInstances(false);
    }

    public Collection<RuleGroup> getAllRuleGroupInstances(boolean transitive) {
        Collection<RuleGroup> result = new ArrayList<RuleGroup>();
        final RDFSNamedClass cls = getRuleGroupClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRuleGroup(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getHypothesisNodeClass() {
        final String uri = "http://www.owl-ontologies.com/BayesianDiagnosis.owl#HypothesisNode";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public HypothesisNode createHypothesisNode(String name) {
        final RDFSNamedClass cls = getHypothesisNodeClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultHypothesisNode(owlModel, cls.createInstance(name).getFrameID());
    }

    public HypothesisNode getHypothesisNode(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof HypothesisNode) {
            return (HypothesisNode) res;
        } else if (res.hasProtegeType(getHypothesisNodeClass())) {
            return new DefaultHypothesisNode(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<HypothesisNode> getAllHypothesisNodeInstances() {
        return getAllHypothesisNodeInstances(false);
    }

    public Collection<HypothesisNode> getAllHypothesisNodeInstances(boolean transitive) {
        Collection<HypothesisNode> result = new ArrayList<HypothesisNode>();
        final RDFSNamedClass cls = getHypothesisNodeClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultHypothesisNode(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getObservationNodeClass() {
        final String uri = "http://www.owl-ontologies.com/BayesianDiagnosis.owl#ObservationNode";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ObservationNode createObservationNode(String name) {
        final RDFSNamedClass cls = getObservationNodeClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultObservationNode(owlModel, cls.createInstance(name).getFrameID());
    }

    public ObservationNode getObservationNode(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ObservationNode) {
            return (ObservationNode) res;
        } else if (res.hasProtegeType(getObservationNodeClass())) {
            return new DefaultObservationNode(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ObservationNode> getAllObservationNodeInstances() {
        return getAllObservationNodeInstances(false);
    }

    public Collection<ObservationNode> getAllObservationNodeInstances(boolean transitive) {
        Collection<ObservationNode> result = new ArrayList<ObservationNode>();
        final RDFSNamedClass cls = getObservationNodeClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultObservationNode(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRequiredDataConditionClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#RequiredDataCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RequiredDataCondition createRequiredDataCondition(String name) {
        final RDFSNamedClass cls = getRequiredDataConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRequiredDataCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public RequiredDataCondition getRequiredDataCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RequiredDataCondition) {
            return (RequiredDataCondition) res;
        } else if (res.hasProtegeType(getRequiredDataConditionClass())) {
            return new DefaultRequiredDataCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<RequiredDataCondition> getAllRequiredDataConditionInstances() {
        return getAllRequiredDataConditionInstances(false);
    }

    public Collection<RequiredDataCondition> getAllRequiredDataConditionInstances(boolean transitive) {
        Collection<RequiredDataCondition> result = new ArrayList<RequiredDataCondition>();
        final RDFSNamedClass cls = getRequiredDataConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRequiredDataCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSystemTestActionClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#SystemTestAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SystemTestAction createSystemTestAction(String name) {
        final RDFSNamedClass cls = getSystemTestActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSystemTestAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public SystemTestAction getSystemTestAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof SystemTestAction) {
            return (SystemTestAction) res;
        } else if (res.hasProtegeType(getSystemTestActionClass())) {
            return new DefaultSystemTestAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<SystemTestAction> getAllSystemTestActionInstances() {
        return getAllSystemTestActionInstances(false);
    }

    public Collection<SystemTestAction> getAllSystemTestActionInstances(boolean transitive) {
        Collection<SystemTestAction> result = new ArrayList<SystemTestAction>();
        final RDFSNamedClass cls = getSystemTestActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSystemTestAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRequiredMinimumConfidenceConditionClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#RequiredMinimumConfidenceCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RequiredMinimumConfidenceCondition createRequiredMinimumConfidenceCondition(String name) {
        final RDFSNamedClass cls = getRequiredMinimumConfidenceConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRequiredMinimumConfidenceCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public RequiredMinimumConfidenceCondition getRequiredMinimumConfidenceCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RequiredMinimumConfidenceCondition) {
            return (RequiredMinimumConfidenceCondition) res;
        } else if (res.hasProtegeType(getRequiredMinimumConfidenceConditionClass())) {
            return new DefaultRequiredMinimumConfidenceCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<RequiredMinimumConfidenceCondition> getAllRequiredMinimumConfidenceConditionInstances() {
        return getAllRequiredMinimumConfidenceConditionInstances(false);
    }

    public Collection<RequiredMinimumConfidenceCondition> getAllRequiredMinimumConfidenceConditionInstances(boolean transitive) {
        Collection<RequiredMinimumConfidenceCondition> result = new ArrayList<RequiredMinimumConfidenceCondition>();
        final RDFSNamedClass cls = getRequiredMinimumConfidenceConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRequiredMinimumConfidenceCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getDeviceFailureClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#DeviceFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public DeviceFailure createDeviceFailure(String name) {
        final RDFSNamedClass cls = getDeviceFailureClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultDeviceFailure(owlModel, cls.createInstance(name).getFrameID());
    }

    public DeviceFailure getDeviceFailure(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof DeviceFailure) {
            return (DeviceFailure) res;
        } else if (res.hasProtegeType(getDeviceFailureClass())) {
            return new DefaultDeviceFailure(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<DeviceFailure> getAllDeviceFailureInstances() {
        return getAllDeviceFailureInstances(false);
    }

    public Collection<DeviceFailure> getAllDeviceFailureInstances(boolean transitive) {
        Collection<DeviceFailure> result = new ArrayList<DeviceFailure>();
        final RDFSNamedClass cls = getDeviceFailureClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDeviceFailure(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getClientAgentClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#ClientAgent";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ClientAgent createClientAgent(String name) {
        final RDFSNamedClass cls = getClientAgentClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultClientAgent(owlModel, cls.createInstance(name).getFrameID());
    }

    public ClientAgent getClientAgent(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ClientAgent) {
            return (ClientAgent) res;
        } else if (res.hasProtegeType(getClientAgentClass())) {
            return new DefaultClientAgent(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ClientAgent> getAllClientAgentInstances() {
        return getAllClientAgentInstances(false);
    }

    public Collection<ClientAgent> getAllClientAgentInstances(boolean transitive) {
        Collection<ClientAgent> result = new ArrayList<ClientAgent>();
        final RDFSNamedClass cls = getClientAgentClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultClientAgent(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRTPSessionClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#RTPSession";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RTPSession createRTPSession(String name) {
        final RDFSNamedClass cls = getRTPSessionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRTPSession(owlModel, cls.createInstance(name).getFrameID());
    }

    public RTPSession getRTPSession(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RTPSession) {
            return (RTPSession) res;
        } else if (res.hasProtegeType(getRTPSessionClass())) {
            return new DefaultRTPSession(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<RTPSession> getAllRTPSessionInstances() {
        return getAllRTPSessionInstances(false);
    }

    public Collection<RTPSession> getAllRTPSessionInstances(boolean transitive) {
        Collection<RTPSession> result = new ArrayList<RTPSession>();
        final RDFSNamedClass cls = getRTPSessionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRTPSession(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSessionClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#Session";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Session createSession(String name) {
        final RDFSNamedClass cls = getSessionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSession(owlModel, cls.createInstance(name).getFrameID());
    }

    public Session getSession(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Session) {
            return (Session) res;
        } else if (res.hasProtegeType(getSessionClass())) {
            return new DefaultSession(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Session> getAllSessionInstances() {
        return getAllSessionInstances(false);
    }

    public Collection<Session> getAllSessionInstances(boolean transitive) {
        Collection<Session> result = new ArrayList<Session>();
        final RDFSNamedClass cls = getSessionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSession(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getClientToRouterClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#ClientToRouter";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ClientToRouter createClientToRouter(String name) {
        final RDFSNamedClass cls = getClientToRouterClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultClientToRouter(owlModel, cls.createInstance(name).getFrameID());
    }

    public ClientToRouter getClientToRouter(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ClientToRouter) {
            return (ClientToRouter) res;
        } else if (res.hasProtegeType(getClientToRouterClass())) {
            return new DefaultClientToRouter(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ClientToRouter> getAllClientToRouterInstances() {
        return getAllClientToRouterInstances(false);
    }

    public Collection<ClientToRouter> getAllClientToRouterInstances(boolean transitive) {
        Collection<ClientToRouter> result = new ArrayList<ClientToRouter>();
        final RDFSNamedClass cls = getClientToRouterClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultClientToRouter(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getConnectionFailureClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#ConnectionFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ConnectionFailure createConnectionFailure(String name) {
        final RDFSNamedClass cls = getConnectionFailureClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultConnectionFailure(owlModel, cls.createInstance(name).getFrameID());
    }

    public ConnectionFailure getConnectionFailure(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ConnectionFailure) {
            return (ConnectionFailure) res;
        } else if (res.hasProtegeType(getConnectionFailureClass())) {
            return new DefaultConnectionFailure(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ConnectionFailure> getAllConnectionFailureInstances() {
        return getAllConnectionFailureInstances(false);
    }

    public Collection<ConnectionFailure> getAllConnectionFailureInstances(boolean transitive) {
        Collection<ConnectionFailure> result = new ArrayList<ConnectionFailure>();
        final RDFSNamedClass cls = getConnectionFailureClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultConnectionFailure(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getUsageMemoryTestClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#UsageMemoryTest";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UsageMemoryTest createUsageMemoryTest(String name) {
        final RDFSNamedClass cls = getUsageMemoryTestClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultUsageMemoryTest(owlModel, cls.createInstance(name).getFrameID());
    }

    public UsageMemoryTest getUsageMemoryTest(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof UsageMemoryTest) {
            return (UsageMemoryTest) res;
        } else if (res.hasProtegeType(getUsageMemoryTestClass())) {
            return new DefaultUsageMemoryTest(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<UsageMemoryTest> getAllUsageMemoryTestInstances() {
        return getAllUsageMemoryTestInstances(false);
    }

    public Collection<UsageMemoryTest> getAllUsageMemoryTestInstances(boolean transitive) {
        Collection<UsageMemoryTest> result = new ArrayList<UsageMemoryTest>();
        final RDFSNamedClass cls = getUsageMemoryTestClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultUsageMemoryTest(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getConnectivityTestActionClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#ConnectivityTestAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ConnectivityTestAction createConnectivityTestAction(String name) {
        final RDFSNamedClass cls = getConnectivityTestActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultConnectivityTestAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public ConnectivityTestAction getConnectivityTestAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ConnectivityTestAction) {
            return (ConnectivityTestAction) res;
        } else if (res.hasProtegeType(getConnectivityTestActionClass())) {
            return new DefaultConnectivityTestAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ConnectivityTestAction> getAllConnectivityTestActionInstances() {
        return getAllConnectivityTestActionInstances(false);
    }

    public Collection<ConnectivityTestAction> getAllConnectivityTestActionInstances(boolean transitive) {
        Collection<ConnectivityTestAction> result = new ArrayList<ConnectivityTestAction>();
        final RDFSNamedClass cls = getConnectivityTestActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultConnectivityTestAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getServerMemoryFailureClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#ServerMemoryFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ServerMemoryFailure createServerMemoryFailure(String name) {
        final RDFSNamedClass cls = getServerMemoryFailureClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultServerMemoryFailure(owlModel, cls.createInstance(name).getFrameID());
    }

    public ServerMemoryFailure getServerMemoryFailure(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ServerMemoryFailure) {
            return (ServerMemoryFailure) res;
        } else if (res.hasProtegeType(getServerMemoryFailureClass())) {
            return new DefaultServerMemoryFailure(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ServerMemoryFailure> getAllServerMemoryFailureInstances() {
        return getAllServerMemoryFailureInstances(false);
    }

    public Collection<ServerMemoryFailure> getAllServerMemoryFailureInstances(boolean transitive) {
        Collection<ServerMemoryFailure> result = new ArrayList<ServerMemoryFailure>();
        final RDFSNamedClass cls = getServerMemoryFailureClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultServerMemoryFailure(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getUsageCPUTestClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#UsageCPUTest";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UsageCPUTest createUsageCPUTest(String name) {
        final RDFSNamedClass cls = getUsageCPUTestClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultUsageCPUTest(owlModel, cls.createInstance(name).getFrameID());
    }

    public UsageCPUTest getUsageCPUTest(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof UsageCPUTest) {
            return (UsageCPUTest) res;
        } else if (res.hasProtegeType(getUsageCPUTestClass())) {
            return new DefaultUsageCPUTest(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<UsageCPUTest> getAllUsageCPUTestInstances() {
        return getAllUsageCPUTestInstances(false);
    }

    public Collection<UsageCPUTest> getAllUsageCPUTestInstances(boolean transitive) {
        Collection<UsageCPUTest> result = new ArrayList<UsageCPUTest>();
        final RDFSNamedClass cls = getUsageCPUTestClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultUsageCPUTest(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getKillProcessClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#KillProcess";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public KillProcess createKillProcess(String name) {
        final RDFSNamedClass cls = getKillProcessClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultKillProcess(owlModel, cls.createInstance(name).getFrameID());
    }

    public KillProcess getKillProcess(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof KillProcess) {
            return (KillProcess) res;
        } else if (res.hasProtegeType(getKillProcessClass())) {
            return new DefaultKillProcess(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<KillProcess> getAllKillProcessInstances() {
        return getAllKillProcessInstances(false);
    }

    public Collection<KillProcess> getAllKillProcessInstances(boolean transitive) {
        Collection<KillProcess> result = new ArrayList<KillProcess>();
        final RDFSNamedClass cls = getKillProcessClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultKillProcess(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getIPClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#IP";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public IP createIP(String name) {
        final RDFSNamedClass cls = getIPClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultIP(owlModel, cls.createInstance(name).getFrameID());
    }

    public IP getIP(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof IP) {
            return (IP) res;
        } else if (res.hasProtegeType(getIPClass())) {
            return new DefaultIP(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<IP> getAllIPInstances() {
        return getAllIPInstances(false);
    }

    public Collection<IP> getAllIPInstances(boolean transitive) {
        Collection<IP> result = new ArrayList<IP>();
        final RDFSNamedClass cls = getIPClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultIP(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getServerCPUFailureClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#ServerCPUFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ServerCPUFailure createServerCPUFailure(String name) {
        final RDFSNamedClass cls = getServerCPUFailureClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultServerCPUFailure(owlModel, cls.createInstance(name).getFrameID());
    }

    public ServerCPUFailure getServerCPUFailure(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof ServerCPUFailure) {
            return (ServerCPUFailure) res;
        } else if (res.hasProtegeType(getServerCPUFailureClass())) {
            return new DefaultServerCPUFailure(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ServerCPUFailure> getAllServerCPUFailureInstances() {
        return getAllServerCPUFailureInstances(false);
    }

    public Collection<ServerCPUFailure> getAllServerCPUFailureInstances(boolean transitive) {
        Collection<ServerCPUFailure> result = new ArrayList<ServerCPUFailure>();
        final RDFSNamedClass cls = getServerCPUFailureClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultServerCPUFailure(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRTPMonitoringActionClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#RTPMonitoringAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RTPMonitoringAction createRTPMonitoringAction(String name) {
        final RDFSNamedClass cls = getRTPMonitoringActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRTPMonitoringAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public RTPMonitoringAction getRTPMonitoringAction(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RTPMonitoringAction) {
            return (RTPMonitoringAction) res;
        } else if (res.hasProtegeType(getRTPMonitoringActionClass())) {
            return new DefaultRTPMonitoringAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<RTPMonitoringAction> getAllRTPMonitoringActionInstances() {
        return getAllRTPMonitoringActionInstances(false);
    }

    public Collection<RTPMonitoringAction> getAllRTPMonitoringActionInstances(boolean transitive) {
        Collection<RTPMonitoringAction> result = new ArrayList<RTPMonitoringAction>();
        final RDFSNamedClass cls = getRTPMonitoringActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRTPMonitoringAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRequiredStreamingSessionConditionClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#RequiredStreamingSessionCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RequiredStreamingSessionCondition createRequiredStreamingSessionCondition(String name) {
        final RDFSNamedClass cls = getRequiredStreamingSessionConditionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRequiredStreamingSessionCondition(owlModel, cls.createInstance(name).getFrameID());
    }

    public RequiredStreamingSessionCondition getRequiredStreamingSessionCondition(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RequiredStreamingSessionCondition) {
            return (RequiredStreamingSessionCondition) res;
        } else if (res.hasProtegeType(getRequiredStreamingSessionConditionClass())) {
            return new DefaultRequiredStreamingSessionCondition(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<RequiredStreamingSessionCondition> getAllRequiredStreamingSessionConditionInstances() {
        return getAllRequiredStreamingSessionConditionInstances(false);
    }

    public Collection<RequiredStreamingSessionCondition> getAllRequiredStreamingSessionConditionInstances(boolean transitive) {
        Collection<RequiredStreamingSessionCondition> result = new ArrayList<RequiredStreamingSessionCondition>();
        final RDFSNamedClass cls = getRequiredStreamingSessionConditionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRequiredStreamingSessionCondition(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRouterIPClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#RouterIP";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RouterIP createRouterIP(String name) {
        final RDFSNamedClass cls = getRouterIPClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRouterIP(owlModel, cls.createInstance(name).getFrameID());
    }

    public RouterIP getRouterIP(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof RouterIP) {
            return (RouterIP) res;
        } else if (res.hasProtegeType(getRouterIPClass())) {
            return new DefaultRouterIP(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<RouterIP> getAllRouterIPInstances() {
        return getAllRouterIPInstances(false);
    }

    public Collection<RouterIP> getAllRouterIPInstances(boolean transitive) {
        Collection<RouterIP> result = new ArrayList<RouterIP>();
        final RDFSNamedClass cls = getRouterIPClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRouterIP(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSmartPhoneClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#SmartPhone";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SmartPhone createSmartPhone(String name) {
        final RDFSNamedClass cls = getSmartPhoneClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSmartPhone(owlModel, cls.createInstance(name).getFrameID());
    }

    public SmartPhone getSmartPhone(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof SmartPhone) {
            return (SmartPhone) res;
        } else if (res.hasProtegeType(getSmartPhoneClass())) {
            return new DefaultSmartPhone(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<SmartPhone> getAllSmartPhoneInstances() {
        return getAllSmartPhoneInstances(false);
    }

    public Collection<SmartPhone> getAllSmartPhoneInstances(boolean transitive) {
        Collection<SmartPhone> result = new ArrayList<SmartPhone>();
        final RDFSNamedClass cls = getSmartPhoneClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSmartPhone(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getDetectedJitterClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#DetectedJitter";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public DetectedJitter createDetectedJitter(String name) {
        final RDFSNamedClass cls = getDetectedJitterClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultDetectedJitter(owlModel, cls.createInstance(name).getFrameID());
    }

    public DetectedJitter getDetectedJitter(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof DetectedJitter) {
            return (DetectedJitter) res;
        } else if (res.hasProtegeType(getDetectedJitterClass())) {
            return new DefaultDetectedJitter(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<DetectedJitter> getAllDetectedJitterInstances() {
        return getAllDetectedJitterInstances(false);
    }

    public Collection<DetectedJitter> getAllDetectedJitterInstances(boolean transitive) {
        Collection<DetectedJitter> result = new ArrayList<DetectedJitter>();
        final RDFSNamedClass cls = getDetectedJitterClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultDetectedJitter(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getNetworkInterfaceRateTestClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#NetworkInterfaceRateTest";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public NetworkInterfaceRateTest createNetworkInterfaceRateTest(String name) {
        final RDFSNamedClass cls = getNetworkInterfaceRateTestClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultNetworkInterfaceRateTest(owlModel, cls.createInstance(name).getFrameID());
    }

    public NetworkInterfaceRateTest getNetworkInterfaceRateTest(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof NetworkInterfaceRateTest) {
            return (NetworkInterfaceRateTest) res;
        } else if (res.hasProtegeType(getNetworkInterfaceRateTestClass())) {
            return new DefaultNetworkInterfaceRateTest(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<NetworkInterfaceRateTest> getAllNetworkInterfaceRateTestInstances() {
        return getAllNetworkInterfaceRateTestInstances(false);
    }

    public Collection<NetworkInterfaceRateTest> getAllNetworkInterfaceRateTestInstances(boolean transitive) {
        Collection<NetworkInterfaceRateTest> result = new ArrayList<NetworkInterfaceRateTest>();
        final RDFSNamedClass cls = getNetworkInterfaceRateTestClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultNetworkInterfaceRateTest(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getPCClass() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#PC";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PC createPC(String name) {
        final RDFSNamedClass cls = getPCClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultPC(owlModel, cls.createInstance(name).getFrameID());
    }

    public PC getPC(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof PC) {
            return (PC) res;
        } else if (res.hasProtegeType(getPCClass())) {
            return new DefaultPC(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<PC> getAllPCInstances() {
        return getAllPCInstances(false);
    }

    public Collection<PC> getAllPCInstances(boolean transitive) {
        Collection<PC> result = new ArrayList<PC>();
        final RDFSNamedClass cls = getPCClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultPC(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getNodeClass() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#Node";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Node createNode(String name) {
        final RDFSNamedClass cls = getNodeClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultNode(owlModel, cls.createInstance(name).getFrameID());
    }

    public Node getNode(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof Node) {
            return (Node) res;
        } else if (res.hasProtegeType(getNodeClass())) {
            return new DefaultNode(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Node> getAllNodeInstances() {
        return getAllNodeInstances(false);
    }

    public Collection<Node> getAllNodeInstances(boolean transitive) {
        Collection<Node> result = new ArrayList<Node>();
        final RDFSNamedClass cls = getNodeClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultNode(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFProperty getPossibleResultsProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#possibleResults";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getExpectedBenefitProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#expectedBenefit";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getSuccessfullyPerformedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#successfullyPerformed";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getWhenHasStartedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#whenHasStarted";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIdProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#id";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getAvailableProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#available";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHypothesisConfidenceProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hypothesisConfidence";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getStatusProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#status";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getWhenHasBeenPerformedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#whenHasBeenPerformed";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getObservationValueProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#observationValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getSatisfiedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#satisfied";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getVariableValueProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#variableValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getWhenHasFinishedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#whenHasFinished";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getObservationTypeProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#observationType";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#performed";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getVariableTypeProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#variableType";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasRuleCategoryProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasRuleCategory";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasBuiltInPhraseProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasBuiltInPhrase";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsRuleEnabledProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsRuleGroupEnabledProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleGroupEnabled";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasClassPhraseProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasClassPhrase";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPropertyPhraseProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasPropertyPhrase";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getRequiredDataTypeProperty() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#requiredDataType";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getThresholdProperty() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#threshold";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPreconditionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasPrecondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getStartsDiagnosisProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#startsDiagnosis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getStartedBySymptomProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#startedBySymptom";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformedTestActionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#performedTestAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformedActionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#performedAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResultSymptomProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#resultSymptom";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsPartOfProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isPartOf";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsComposedByProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isComposedBy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPerformedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasPerformed";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasBeenPerformedByProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasBeenPerformedBy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasAgentResidingProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasAgentResiding";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsPartOfNetworkProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isPartOfNetwork";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasConnectionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasConnection";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasConditionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasCondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getConnectsSystemProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#connectsSystem";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsConnectedByProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isConnectedBy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCanBeRepairedWithProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#canBeRepairedWith";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getRepairsFailureProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#repairsFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getBelongsToNetworkProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#belongsToNetwork";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasDeviceProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasDevice";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformedMonitoringActionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#performedMonitoringAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPerformedHealingActionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#performedHealingAction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCanBePerformedByProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#canBePerformedBy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getCanPerformProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#canPerform";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasHypothesisProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasHypothesis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPostconditionProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasPostcondition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getResidesInProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#residesIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasDataProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasData";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasLocationProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasLocation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsExecutingInProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#isExecutingIn";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getRepresentsPossibleFailureProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#representsPossibleFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasFailureProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#hasFailure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getObservationResultProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#observationResult";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasRuleGroupProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasRuleGroup";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasBayesianHypothesisProperty() {
        final String uri = "http://www.owl-ontologies.com/BayesianDiagnosis.owl#hasBayesianHypothesis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasBayesianObservationProperty() {
        final String uri = "http://www.owl-ontologies.com/BayesianDiagnosis.owl#hasBayesianObservation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasServerProperty() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#hasServer";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasClientProperty() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#hasClient";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }
}
