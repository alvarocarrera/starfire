package es.upm.dit.gsi.ontology.impl;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.*;
import edu.stanford.smi.protegex.owl.model.impl.*;
import edu.stanford.smi.protegex.owl.javacode.AbstractCodeGeneratorIndividual;
import java.util.*;

import es.upm.dit.gsi.ontology.MTheory;
import es.upm.dit.gsi.ontology.*;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.pr-owl.org/pr-owl.owl#MTheory
 *
 * @version generated on Fri Apr 01 15:09:42 CEST 2011
 */
public class DefaultMTheory extends AbstractCodeGeneratorIndividual
         implements MTheory {

    public DefaultMTheory(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }


    public DefaultMTheory() {
    }



    // Property http://www.pr-owl.org/pr-owl.owl#hasMFrag

    public Set getHasMFrag() {
        return new HashSet(getPropertyValuesAs(getHasMFragProperty(), MFrag.class));
    }


    public RDFProperty getHasMFragProperty() {
        final String uri = "http://www.pr-owl.org/pr-owl.owl#hasMFrag";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasHasMFrag() {
        return getPropertyValueCount(getHasMFragProperty()) > 0;
    }


    public Iterator listHasMFrag() {
        return listPropertyValuesAs(getHasMFragProperty(), MFrag.class);
    }


    public void addHasMFrag(MFrag newHasMFrag) {
        addPropertyValue(getHasMFragProperty(), newHasMFrag);
    }


    public void removeHasMFrag(MFrag oldHasMFrag) {
        removePropertyValue(getHasMFragProperty(), oldHasMFrag);
    }


    public void setHasMFrag(Set newHasMFrag) {
        setPropertyValues(getHasMFragProperty(), newHasMFrag);
    }
}
