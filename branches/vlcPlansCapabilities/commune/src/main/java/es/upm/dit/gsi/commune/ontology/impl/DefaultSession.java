package es.upm.dit.gsi.commune.ontology.impl;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.*;
import edu.stanford.smi.protegex.owl.model.impl.*;
import edu.stanford.smi.protegex.owl.javacode.AbstractCodeGeneratorIndividual;
import es.upm.dit.gsi.commune.ontology.Session;
import es.upm.dit.gsi.commune.ontology.*;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.owl-ontologies.com/P2PDiagnosis.owl#Session
 *
 * @version generated on Tue Apr 05 14:50:26 CEST 2011
 */
public class DefaultSession extends AbstractCodeGeneratorIndividual
         implements Session {

    public DefaultSession(OWLModel owlModel, FrameID id) {
        super(owlModel, id);
    }


    public DefaultSession() {
    }



    // Property http://www.owl-ontologies.com/P2PDiagnosis.owl#hasClient

    public SoftwareSystem getHasClient() {
        return (SoftwareSystem) getPropertyValueAs(getHasClientProperty(), SoftwareSystem.class);
    }


    public RDFProperty getHasClientProperty() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#hasClient";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasHasClient() {
        return getPropertyValueCount(getHasClientProperty()) > 0;
    }


    public void setHasClient(SoftwareSystem newHasClient) {
        setPropertyValue(getHasClientProperty(), newHasClient);
    }



    // Property http://www.owl-ontologies.com/P2PDiagnosis.owl#hasServer

    public SoftwareSystem getHasServer() {
        return (SoftwareSystem) getPropertyValueAs(getHasServerProperty(), SoftwareSystem.class);
    }


    public RDFProperty getHasServerProperty() {
        final String uri = "http://www.owl-ontologies.com/P2PDiagnosis.owl#hasServer";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasHasServer() {
        return getPropertyValueCount(getHasServerProperty()) > 0;
    }


    public void setHasServer(SoftwareSystem newHasServer) {
        setPropertyValue(getHasServerProperty(), newHasServer);
    }



    // Property http://www.owl-ontologies.com/Diagnosis.owl#status

    public String getStatus() {
        return (String) getPropertyValue(getStatusProperty());
    }


    public RDFProperty getStatusProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#status";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasStatus() {
        return getPropertyValueCount(getStatusProperty()) > 0;
    }


    public void setStatus(String newStatus) {
        setPropertyValue(getStatusProperty(), newStatus);
    }



    // Property http://www.owl-ontologies.com/Diagnosis.owl#whenHasFinished

    public RDFSLiteral getWhenHasFinished() {
        return (RDFSLiteral) getPropertyValue(getWhenHasFinishedProperty());
    }


    public RDFProperty getWhenHasFinishedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#whenHasFinished";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasWhenHasFinished() {
        return getPropertyValueCount(getWhenHasFinishedProperty()) > 0;
    }


    public void setWhenHasFinished(RDFSLiteral newWhenHasFinished) {
        setPropertyValue(getWhenHasFinishedProperty(), newWhenHasFinished);
    }



    // Property http://www.owl-ontologies.com/Diagnosis.owl#whenHasStarted

    public RDFSLiteral getWhenHasStarted() {
        return (RDFSLiteral) getPropertyValue(getWhenHasStartedProperty());
    }


    public RDFProperty getWhenHasStartedProperty() {
        final String uri = "http://www.owl-ontologies.com/Diagnosis.owl#whenHasStarted";
        final String name = getOWLModel().getResourceNameForURI(uri);
        return getOWLModel().getRDFProperty(name);
    }


    public boolean hasWhenHasStarted() {
        return getPropertyValueCount(getWhenHasStartedProperty()) > 0;
    }


    public void setWhenHasStarted(RDFSLiteral newWhenHasStarted) {
        setPropertyValue(getWhenHasStartedProperty(), newWhenHasStarted);
    }
}
